// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// BN254G1Point is an auto generated low-level Go binding around an user-defined struct.
type BN254G1Point struct {
	X *big.Int
	Y *big.Int
}

// BN254G2Point is an auto generated low-level Go binding around an user-defined struct.
type BN254G2Point struct {
	X [2]*big.Int
	Y [2]*big.Int
}

// IDAEntranceCommitRootSubmission is an auto generated low-level Go binding around an user-defined struct.
type IDAEntranceCommitRootSubmission struct {
	DataRoot          [32]byte
	Epoch             *big.Int
	QuorumId          *big.Int
	ErasureCommitment BN254G1Point
	QuorumBitmap      []byte
	AggPkG2           BN254G2Point
	Signature         BN254G1Point
}

// IDASampleSampleRange is an auto generated low-level Go binding around an user-defined struct.
type IDASampleSampleRange struct {
	StartEpoch uint64
	EndEpoch   uint64
}

// IDASampleSampleTask is an auto generated low-level Go binding around an user-defined struct.
type IDASampleSampleTask struct {
	SampleHash      [32]byte
	PodasTarget     *big.Int
	RestSubmissions uint64
}

// SampleResponse is an auto generated low-level Go binding around an user-defined struct.
type SampleResponse struct {
	SampleSeed   [32]byte
	Epoch        uint64
	QuorumId     uint64
	LineIndex    uint32
	SublineIndex uint32
	Quality      *big.Int
	DataRoot     [32]byte
	BlobRoots    [3][32]byte
	Proof        [][32]byte
	Data         []byte
}

// DAEntranceMetaData contains all meta data concerning the DAEntrance contract.
var DAEntranceMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sampleRound\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quorumId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dataRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quality\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lineIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sublineIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"DAReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dataRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quorumId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blobPrice\",\"type\":\"uint256\"}],\"name\":\"DataUpload\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dataRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quorumId\",\"type\":\"uint256\"}],\"name\":\"ErasureCommitmentVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sampleRound\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sampleHeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sampleSeed\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"podasTarget\",\"type\":\"uint256\"}],\"name\":\"NewSampleRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DA_SIGNERS\",\"outputs\":[{\"internalType\":\"contractIDASigners\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PODAS_TARGET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PARAMS_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLICE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLICE_NUMERATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blobPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_dataRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quorumId\",\"type\":\"uint256\"}],\"name\":\"commitmentExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpochReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSampleSeed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochWindowSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextSampleHeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"podasTarget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundSubmissions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"samplePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sampleRange\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"startEpoch\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endEpoch\",\"type\":\"uint64\"}],\"internalType\":\"structIDASample.SampleRange\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sampleRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sampleTask\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"sampleHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"podasTarget\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"restSubmissions\",\"type\":\"uint64\"}],\"internalType\":\"structIDASample.SampleTask\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serviceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serviceFeeRateBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseReward\",\"type\":\"uint256\"}],\"name\":\"setBaseReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blobPrice\",\"type\":\"uint256\"}],\"name\":\"setBlobPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_epochWindowSize\",\"type\":\"uint64\"}],\"name\":\"setEpochWindowSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_rewardRatio\",\"type\":\"uint64\"}],\"name\":\"setRewardRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_targetRoundSubmissions\",\"type\":\"uint64\"}],\"name\":\"setRoundSubmissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"samplePeriod_\",\"type\":\"uint64\"}],\"name\":\"setSamplePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bps\",\"type\":\"uint256\"}],\"name\":\"setServiceFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_dataRoots\",\"type\":\"bytes32[]\"}],\"name\":\"submitOriginalData\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"sampleSeed\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"epoch\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"quorumId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"lineIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"sublineIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"quality\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"dataRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[3]\",\"name\":\"blobRoots\",\"type\":\"bytes32[3]\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structSampleResponse\",\"name\":\"rep\",\"type\":\"tuple\"}],\"name\":\"submitSamplingResponse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"dataRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quorumId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN254.G1Point\",\"name\":\"erasureCommitment\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"quorumBitmap\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"X\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"Y\",\"type\":\"uint256[2]\"}],\"internalType\":\"structBN254.G2Point\",\"name\":\"aggPkG2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN254.G1Point\",\"name\":\"signature\",\"type\":\"tuple\"}],\"internalType\":\"structIDAEntrance.CommitRootSubmission[]\",\"name\":\"_submissions\",\"type\":\"tuple[]\"}],\"name\":\"submitVerifiedCommitRoots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_times\",\"type\":\"uint256\"}],\"name\":\"syncFixedTimes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetRoundSubmissions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetRoundSubmissionsNext\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBaseReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_dataRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quorumId\",\"type\":\"uint256\"}],\"name\":\"verifiedErasureCommitment\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN254.G1Point\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"withdrawPayments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50614be4806100206000396000f3fe608060405260043610620003965760003560e01c80638129fc1c11620001eb578063c0575111116200010b578063e68e035b11620000a1578063f0f442601162000078578063f0f442601462000a43578063f69027751462000a68578063ff1877481462000a8d578063fff6cae91462000aa557600080fd5b8063e68e035b14620009fc578063eafed6ce1462000a14578063ed88c68e1462000a3957600080fd5b8063d4ae59c911620000e2578063d4ae59c91462000976578063d547741f146200098d578063e051d1ea14620009b2578063e2982c2114620009d757600080fd5b8063c05751111462000921578063c8d3b3591462000939578063ca15c873146200095157600080fd5b806398920f5711620001815780639fae1fa411620001585780639fae1fa414620008a8578063a217fddf14620008c0578063b15d20da14620008d7578063b1be17ab14620008fc57600080fd5b806398920f57146200082a5780639b1d309114620008425780639da3a69b146200086757600080fd5b80638bdcc71211620001c25780638bdcc71214620007845780639010d07c146200079c57806391d1485414620007c1578063988ea94e14620007e657600080fd5b80638129fc1c146200072f57806388521ec714620007475780638abdf5aa146200076c57600080fd5b80633bab2a7011620002d75780636a53525d116200026d5780637667180811620002445780637667180814620006cf57806376ad03bc14620006e75780637f1b5e4314620006ff578063807f063a146200071757600080fd5b80636a53525d14620006525780636efc255514620006775780637397eb3314620006b757600080fd5b80635626a47b11620002ae5780635626a47b14620005d1578063602b245a14620005e857806361d027b314620005ff578063646033bc146200063a57600080fd5b80633bab2a70146200057c5780633d00448a14620005a15780633e89833714620005b957600080fd5b806323dd60a6116200034d5780632f2ff15d11620003245780632f2ff15d14620004f55780632fc0534b146200051a57806331b3eb94146200053257806336568abe146200055757600080fd5b806323dd60a61462000483578063248a9ca314620004a8578063257a3aa314620004dd57600080fd5b806301ffc9a7146200039b5780630373a23a14620003d55780631192de9a14620003fc578063125770521462000421578063158ef93e1462000448578063168a062c146200046b575b600080fd5b348015620003a857600080fd5b50620003c0620003ba36600462003ae7565b62000abd565b60405190151581526020015b60405180910390f35b348015620003e257600080fd5b50620003fa620003f436600462003b13565b62000aeb565b005b3480156200040957600080fd5b50620003fa6200041b36600462003b4a565b62000b16565b3480156200042e57600080fd5b506200043960405481565b604051908152602001620003cc565b3480156200045557600080fd5b50600054620003c090600160a01b900460ff1681565b3480156200047857600080fd5b5062000439603a5481565b3480156200049057600080fd5b50620003fa620004a236600462003b13565b62000b83565b348015620004b557600080fd5b5062000439620004c736600462003b13565b6000908152600160208190526040909120015490565b348015620004ea57600080fd5b506200043960435481565b3480156200050257600080fd5b50620003fa6200051436600462003b7e565b62000bae565b3480156200052757600080fd5b5062000439603e5481565b3480156200053f57600080fd5b50620003fa6200055136600462003bb1565b62000bdd565b3480156200056457600080fd5b50620003fa6200057636600462003b7e565b62000c41565b3480156200058957600080fd5b50620003fa6200059b36600462003b4a565b62000cc3565b348015620005ae57600080fd5b506200043960475481565b348015620005c657600080fd5b506200043960445481565b348015620005de57600080fd5b5062000439600281565b348015620005f557600080fd5b5062000439600381565b3480156200060c57600080fd5b50604a5462000621906001600160a01b031681565b6040516001600160a01b039091168152602001620003cc565b3480156200064757600080fd5b506200043960455481565b3480156200065f57600080fd5b50620003c06200067136600462003bd1565b62000d52565b3480156200068457600080fd5b506200068f62000d79565b6040805182516001600160401b039081168252602093840151169281019290925201620003cc565b348015620006c457600080fd5b5062000439603b5481565b348015620006dc57600080fd5b506200043960385481565b348015620006f457600080fd5b506200043960465481565b3480156200070c57600080fd5b506200043960415481565b3480156200072457600080fd5b506200062161100081565b3480156200073c57600080fd5b50620003fa62000e07565b3480156200075457600080fd5b50620003fa6200076636600462003b4a565b62000fc5565b3480156200077957600080fd5b506200043960425481565b3480156200079157600080fd5b506200043962001141565b348015620007a957600080fd5b5062000621620007bb36600462003bfe565b62001153565b348015620007ce57600080fd5b50620003c0620007e036600462003b7e565b62001174565b348015620007f357600080fd5b50620007fe6200119f565b604080518251815260208084015190820152918101516001600160401b031690820152606001620003cc565b3480156200083757600080fd5b506200043960485481565b3480156200084f57600080fd5b50620003fa6200086136600462003b13565b62001217565b3480156200087457600080fd5b506200088c6200088636600462003bd1565b62001242565b60408051825181526020928301519281019290925201620003cc565b348015620008b557600080fd5b506200043960395481565b348015620008cd57600080fd5b5062000439600081565b348015620008e457600080fd5b506200043960008051602062004b8f83398151915281565b3480156200090957600080fd5b50620003fa6200091b36600462003b4a565b620012b2565b3480156200092e57600080fd5b506200043960495481565b3480156200094657600080fd5b5062000439603c5481565b3480156200095e57600080fd5b50620004396200097036600462003b13565b62001341565b620003fa6200098736600462003d79565b6200135a565b3480156200099a57600080fd5b50620003fa620009ac36600462003b7e565b62001566565b348015620009bf57600080fd5b50620003fa620009d136600462003b13565b62001590565b348015620009e457600080fd5b5062000439620009f636600462003bb1565b620015c3565b34801562000a0957600080fd5b5062000439603f5481565b34801562000a2157600080fd5b50620003fa62000a3336600462003f1f565b62001635565b620003fa62001973565b34801562000a5057600080fd5b50620003fa62000a6236600462003bb1565b62001998565b34801562000a7557600080fd5b50620003fa62000a87366004620040d3565b620019e0565b34801562000a9a57600080fd5b5062000439603d5481565b34801562000ab257600080fd5b50620003fa62001f33565b60006001600160e01b03198216635a05180f60e01b148062000ae5575062000ae58262001f59565b92915050565b60008051602062004b8f83398151915262000b068162001f90565b62000b1062001f33565b50604655565b60008051602062004b8f83398151915262000b318162001f90565b62000b3b62001f33565b6001600160401b038216604855603a5460000362000b7f5760485462000b6281436200421d565b62000b6f90600162004234565b62000b7b91906200424a565b603b555b5050565b60008051602062004b8f83398151915262000b9e8162001f90565b62000ba862001f33565b50604755565b6000828152600160208190526040909120015462000bcc8162001f90565b62000bd8838362001f9f565b505050565b6000546040516351cff8d960e01b81526001600160a01b038381166004830152909116906351cff8d990602401600060405180830381600087803b15801562000c2557600080fd5b505af115801562000c3a573d6000803e3d6000fd5b5050505050565b6001600160a01b038116331462000cb75760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b62000b7f828262001fc5565b60008051602062004b8f83398151915262000cde8162001f90565b62000ce862001f33565b6000826001600160401b03161162000d435760405162461bcd60e51b815260206004820152601d60248201527f52657761726420726174696f206d757374206265206e6f6e2d7a65726f000000604482015260640162000cae565b506001600160401b0316604555565b60008062000d6285858562001242565b905062000d6f8162001feb565b1595945050505050565b604080518082019091526000808252602082015262000d9762001f33565b6000806000603854111562000dba57600160385462000db791906200426c565b90505b604454811062000de457600160445462000dd591906200426c565b62000de190826200426c565b91505b604080518082019091526001600160401b03928316815291166020820152919050565b600054600160a01b900460ff161562000e6f5760405162461bcd60e51b8152602060048201526024808201527f5a67496e697469616c697a61626c653a20616c726561647920696e697469616c6044820152631a5e995960e21b606482015260840162000cae565b6000805460ff60a01b1916600160a01b17815562000e959062000e8f3390565b62001f9f565b62000eb060008051602062004b8f8339815191523362001f9f565b6110006001600160a01b031663f4145a836040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000ef1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f17919062004282565b603855601e604881905562000f2d81436200421d565b62000f3a90600162004234565b62000f4691906200424a565b603b5562000f5860806000196200421d565b603c55601460435561012c60445562124f806045556000604681905560475560405162000f8590620039fb565b604051809103906000f08015801562000fa2573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b0392909216919091179055565b60008051602062004b8f83398151915262000fe08162001f90565b62000fea62001f33565b603e5462000ffa9060046200424a565b826001600160401b03161115620010605760405162461bcd60e51b8152602060048201526024808201527f496e63726561736520726f756e64207375626d697373696f6e7320746f6f206c6044820152636172676560e01b606482015260840162000cae565b6004603e546200107191906200421d565b826001600160401b03161015620010d75760405162461bcd60e51b8152602060048201526024808201527f446563726561736520726f756e64207375626d697373696f6e7320746f6f206c6044820152636172676560e01b606482015260840162000cae565b6000826001600160401b031611620011325760405162461bcd60e51b815260206004820181905260248201527f526f756e64207375626d697373696f6e732063616e6e6f74206265207a65726f604482015260640162000cae565b506001600160401b0316604355565b6200115060806000196200421d565b81565b60008281526002602052604081206200116d908362002002565b9392505050565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6040805160608101825260008082526020820181905291810191909152620011c662001f33565b6000603e546002620011d991906200424a565b905060405180606001604052806039548152602001603c548152602001603d54836200120691906200426c565b6001600160401b0316905292915050565b60008051602062004b8f833981519152620012328162001f90565b6200123c62001f33565b50604955565b604080518082018252600080825260209182018190528251808301969096528583019490945260608086019390935281518086039093018352608085018083528351938201939093208452603590529182902060c084019092528154815260019091015460a09092019190915290565b60008051602062004b8f833981519152620012cd8162001f90565b620012d762001f33565b6000826001600160401b031611620013325760405162461bcd60e51b815260206004820181905260248201527f45706f63682077696e646f772073697a652063616e6e6f74206265207a65726f604482015260640162000cae565b506001600160401b0316604455565b600081815260026020526040812062000ae59062002010565b6200136462001f33565b60475481516200137591906200424a565b341015620013bf5760405162461bcd60e51b81526020600482015260166024820152754e6f7420656e6f75676820646120626c6f622066656560501b604482015260640162000cae565b34603f6000828254620013d3919062004234565b9091555050603854604051635ecba50360e01b815260009161100091635ecba50391620014069160040190815260200190565b602060405180830381865afa15801562001424573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200144a919062004282565b9050600081116200149e5760405162461bcd60e51b815260206004820152601960248201527f4441456e7472616e63653a204e6f204441205369676e65727300000000000000604482015260640162000cae565b806036546001620014b0919062004234565b620014bc91906200429c565b603655815160005b8181101562001560577f57b8b1a6583dc6ce934dfba3d66f2a8e1591b6e171bb2e0921cc64640277087b33858381518110620015045762001504620042b3565b602090810291909101810151603854603654604754604080516001600160a01b03909716875294860193909352928401526060830191909152608082015260a00160405180910390a16200155881620042c9565b9050620014c4565b50505050565b60008281526001602081905260409091200154620015848162001f90565b62000bd8838362001fc5565b6200159a6200201b565b60005b8181101562000b7f57620015b0620020a2565b620015bb81620042c9565b90506200159d565b600080546040516371d4ed8d60e11b81526001600160a01b0384811660048301529091169063e3a9db1a90602401602060405180830381865afa1580156200160f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ae5919062004282565b805160005b8181101562000bd857620016b08382815181106200165c576200165c620042b3565b6020026020010151600001518483815181106200167d576200167d620042b3565b6020026020010151602001518584815181106200169e576200169e620042b3565b60200260200101516040015162000d52565b620019605760008060006110006001600160a01b03166350b73739878681518110620016e057620016e0620042b3565b602002602001015160200151888781518110620017015762001701620042b3565b602002602001015160400151898881518110620017225762001722620042b3565b6020026020010151608001516040518463ffffffff1660e01b81526004016200174e9392919062004339565b608060405180830381865afa1580156200176c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001792919062004363565b925092509250620017c983878681518110620017b257620017b2620042b3565b60200260200101516200216690919063ffffffff16565b620017d66003826200424a565b620017e38360026200424a565b1115620018425760405162461bcd60e51b815260206004820152602660248201527f444152656769737472793a20696e73756666696369656e74207369676e656420604482015265736c6963657360d01b606482015260840162000cae565b858481518110620018575762001857620042b3565b602002602001015160600151603560006200188e898881518110620018805762001880620042b3565b60200260200101516200233a565b81526020808201929092526040016000208251815591015160019091015585517f0f1b20d87bebd11dddaaab51f01cf2726880cb3f8073b636dbafa2aa8cacd25690879086908110620018e557620018e5620042b3565b602002602001015160000151878681518110620019065762001906620042b3565b602002602001015160200151888781518110620019275762001927620042b3565b60200260200101516040015160405162001954939291909283526020830191909152604082015260600190565b60405180910390a15050505b6200196b81620042c9565b90506200163a565b6200197d62001f33565b346041600082825462001991919062004234565b9091555050565b60008051602062004b8f833981519152620019b38162001f90565b620019bd62001f33565b50604a80546001600160a01b0319166001600160a01b0392909216919091179055565b620019ea62001f33565b8051602080830151604080850151606086015160808701518351808701979097526001600160c01b031960c095861b8116888601529290941b90911660488601526001600160e01b031960e091821b8116605087015292901b90911660548401528051808403603801815260589093019052815191012060009060008181526037602052604090205490915060ff161562001ac05760405162461bcd60e51b8152602060048201526015602482015274223ab83634b1b0ba32b21039bab136b4b9b9b4b7b760591b604482015260640162000cae565b6000818152603760205260409020805460ff19166001179055603a5462001b2a5760405162461bcd60e51b815260206004820152601e60248201527f53616d706c6520726f756e6420302063616e6e6f74206265206d696e65640000604482015260640162000cae565b603e5462001b3a9060026200424a565b603d541062001b965760405162461bcd60e51b815260206004820152602160248201527f546f6f206d616e79207375626d697373696f6e7320696e206f6e6520726f756e6044820152601960fa1b606482015260840162000cae565b60395482511462001be25760405162461bcd60e51b8152602060048201526015602482015274155b9b585d18da1959081cd85b5c1b19481cd95959605a1b604482015260640162000cae565b603c548260a00151111562001c305760405162461bcd60e51b8152602060048201526013602482015272145d585b1a5d1e481b9bdd081c995858da1959606a1b604482015260640162000cae565b62001c5b8260c0015183602001516001600160401b031684604001516001600160401b031662000d52565b62001ca15760405162461bcd60e51b8152602060048201526015602482015274155b9c9958dbdc9919590818dbdb5b5a5d1b595b9d605a1b604482015260640162000cae565b60385460445483602001516001600160401b031662001cc1919062004234565b101562001d115760405162461bcd60e51b815260206004820152601a60248201527f45706f6368206861732073746f707065642073616d706c696e67000000000000604482015260640162000cae565b60385482602001516001600160401b03161062001d715760405162461bcd60e51b815260206004820152601b60248201527f43616e6e6f742073616d706c652063757272656e742065706f63680000000000604482015260640162000cae565b62001d7c8262002381565b602082015160408084015160608501519151637d37e5d360e11b81526001600160401b0393841660048201529216602483015263ffffffff1660448201526000906110009063fa6fcba690606401602060405180830381865afa15801562001de8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001e0e9190620043b9565b90506001603d600082825462001e25919062004234565b909155505060455460405460009162001e3e916200421d565b9050806040600082825462001e5491906200426c565b9091555062001e64905062002730565b62001e70908262004234565b9050801562001e855762001e8582826200276b565b83602001516001600160401b0316603a54836001600160a01b03167fc3898eb7106c1cb2f727da316a76320c0035f5692950aa7f6b65d20a5efaedc587604001518860c001518960a001518a606001518b608001518960405162001f25969594939291906001600160401b039690961686526020860194909452604085019290925263ffffffff908116606085015216608083015260a082015260c00190565b60405180910390a450505050565b62001f3d6200201b565b603b54431062001f575762001f51620020a2565b62001f3d565b565b60006001600160e01b03198216637965db0b60e01b148062000ae557506301ffc9a760e01b6001600160e01b031983161462000ae5565b62001f9c8133620027c9565b50565b62001fab82826200282d565b600082815260026020526040902062000bd890826200289b565b62001fd18282620028b2565b600082815260026020526040902062000bd890826200291c565b805160009015801562000ae5575050602001511590565b60006200116d838362002933565b600062000ae5825490565b60006110006001600160a01b031663f4145a836040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200205e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002084919062004282565b90508060385403620020935750565b603881905562001f9c62002960565b603b54431015620020af57565b603a5415620020c657620020c2620029d1565b603c555b6001603a6000828254620020db919062004234565b9091555050603b54620020f06001826200426c565b40603955604854603b80546000906200210b90849062004234565b9091555050604354603e556000603d55603a54603954603c546040805185815260208101939093528201527fdfb5db5886e81f083727f21152a2a83457e99364e9f104e1aa10bbd6d9b4b95f9060600160405180910390a250565b6000620021738362002ac2565b60a084015160c085015180516020808301518751888301518651848801518951868b01516040519b9c50999a98996000997f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000199620021db9990989796959493929101620043fe565b6040516020818303038152906040528051906020012060001c6200220091906200429c565b90506000806200227b6200222162002219898662002b3f565b869062002bd5565b6200222b62002c6f565b62002270620022688762002261604080518082018252600080825260209182015281518083019092526001825260029082015290565b9062002b3f565b8a9062002bd5565b886201d4c062002d31565b9150915081620022e15760405162461bcd60e51b815260206004820152602a60248201527f444152656769737472793a2070616972696e6720707265636f6d70696c652063604482015269185b1b0819985a5b195960b21b606482015260840162000cae565b80620023305760405162461bcd60e51b815260206004820181905260248201527f444152656769737472793a207369676e617475726520697320696e76616c6964604482015260640162000cae565b5050505050505050565b805160208083015160408085015181518085019590955284820192909252606080850192909252805180850390920182526080909301909252815191012060009062000ae5565b8051620023d15760405162461bcd60e51b815260206004820152601b60248201527f53616d706c6520736565642063616e6e6f7420626520656d7074790000000000604482015260640162000cae565b620023e060036104006200444e565b6001600160401b0316816060015163ffffffff16106200243a5760405162461bcd60e51b8152602060048201526014602482015273092dcc6dee4e4cac6e840d8d2dcca40d2dcc8caf60631b604482015260640162000cae565b60206001600160401b0316816080015163ffffffff16106200249f5760405162461bcd60e51b815260206004820152601860248201527f496e636f7272656374207375622d6c696e6520696e6465780000000000000000604482015260640162000cae565b600062002525826000015183602001516001600160401b031684604001516001600160401b03168560c00151866060015163ffffffff1660408051602080820197909752808201959095526060850193909352608084019190915260c01b6001600160c01b03191660a08301528051608881840301815260a89092019052805191012090565b905060006200254582846080015163ffffffff1685610120015162002f95565b90508062002556836000196200426c565b1015620025995760405162461bcd60e51b815260206004820152601060248201526f5175616c697479206f766572666c6f7760801b604482015260640162000cae565b60a0830151620025aa828462004234565b14620025ed5760405162461bcd60e51b8152602060048201526011602482015270496e636f7272656374207175616c69747960781b604482015260640162000cae565b6020620025fd610400826200444e565b62002609919062004480565b6001600160401b03168361012001515114620026605760405162461bcd60e51b8152602060048201526015602482015274092dcc6dee4e4cac6e840c8c2e8c240d8cadccee8d605b1b604482015260640162000cae565b60006200267284610120015162002fce565b90506000610400856060015163ffffffff1662002690919062004480565b905060008560e00151826001600160401b031660038110620026b657620026b6620042b3565b602002015190506000866080015163ffffffff166020610400896060015163ffffffff16620026e69190620044a9565b620026f291906200444e565b620026fe9190620044d2565b9050620027138483896101000151846200322d565b620027278760e001518860c0015162003346565b50505050505050565b60006046546041541162002747576041546200274b565b6046545b905080604160008282546200276191906200426c565b9250508190555090565b60005460405163f340fa0160e01b81526001600160a01b0384811660048301529091169063f340fa019083906024016000604051808303818588803b158015620027b457600080fd5b505af115801562002727573d6000803e3d6000fd5b620027d5828262001174565b62000b7f57620027e58162003396565b620027f2836020620033a9565b60405160200162002805929190620044f5565b60408051601f198184030181529082905262461bcd60e51b825262000cae916004016200456e565b62002839828262001174565b62000b7f5760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b60006200116d836001600160a01b03841662003562565b620028be828262001174565b1562000b7f5760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006200116d836001600160a01b038416620035b4565b60008260000182815481106200294d576200294d620042b3565b9060005260206000200154905092915050565b6000612710604954603f546200297791906200424a565b6200298391906200421d565b905080603f546200299591906200426c565b60406000828254620029a8919062004234565b90915550506000603f55801562001f9c57604a5462001f9c906001600160a01b031682620036bf565b60008060006020603c54901c9050603e54603d54111562002a3d576008603e54603e54603d5462002a0391906200426c565b62002a0f90846200424a565b62002a1b91906200421d565b62002a2791906200421d565b915062002a3582826200426c565b905062002a89565b6008603e54603d54603e5462002a5491906200426c565b62002a6090846200424a565b62002a6c91906200421d565b62002a7891906200421d565b915062002a86828262004234565b90505b602062002a9a60806000196200421d565b901c811062002ab95762002ab260806000196200421d565b9250505090565b60201b92915050565b604080518082019091526000808252602082015281516020808401516040808601516060870151805190850151925162000ae59662002b23969095949101948552602085019390935260408401919091526060830152608082015260a00190565b60405160208183030381529060405280519060200120620037de565b604080518082019091526000808252602082015262002b5d62003a09565b835181526020808501519082015260408082018490526000908360608460076107d05a03fa9050808062002b8d57fe5b508062002bcd5760405162461bcd60e51b815260206004820152600d60248201526c1958cb5b5d5b0b59985a5b1959609a1b604482015260640162000cae565b505092915050565b604080518082019091526000808252602082015262002bf362003a27565b835181526020808501518183015283516040808401919091529084015160608301526000908360808460066107d05a03fa9050808062002c2f57fe5b508062002bcd5760405162461bcd60e51b815260206004820152600d60248201526c1958cb5859190b59985a5b1959609a1b604482015260640162000cae565b62002c7962003a45565b50604080516080810182527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c28183019081527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6060830152815281518083019092527f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec82527f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d60208381019190915281019190915290565b60408051808201825286815260208082018690528251808401909352868352820184905260009182919062002d6562003a6e565b60005b600281101562002f6657600062002d818260066200424a565b905084826002811062002d985762002d98620042b3565b6020020151518362002dac83600062004234565b600c811062002dbf5762002dbf620042b3565b602002015284826002811062002dd95762002dd9620042b3565b6020020151602001518382600162002df2919062004234565b600c811062002e055762002e05620042b3565b602002015283826002811062002e1f5762002e1f620042b3565b602002015151518362002e3483600262004234565b600c811062002e475762002e47620042b3565b602002015283826002811062002e615762002e61620042b3565b602002015151600160200201518362002e7c83600362004234565b600c811062002e8f5762002e8f620042b3565b602002015283826002811062002ea95762002ea9620042b3565b60200201516020015160006002811062002ec75762002ec7620042b3565b60200201518362002eda83600462004234565b600c811062002eed5762002eed620042b3565b602002015283826002811062002f075762002f07620042b3565b60200201516020015160016002811062002f255762002f25620042b3565b60200201518362002f3883600562004234565b600c811062002f4b5762002f4b620042b3565b6020020152508062002f5d81620042c9565b91505062002d68565b5062002f7162003a8d565b60006020826101808560088cfa9151919c9115159b50909950505050505050505050565b600083838360405160200162002fae9392919062004583565b60408051601f198184030181529190528051602090910120949350505050565b8051600090610100811080159062002ff2575062002fee6001826200426c565b8116155b6200305f5760405162461bcd60e51b815260206004820152603660248201527f44617461206c656e677468206d7573742062652067726561746572207468616e60448201527510191a9b1030b7321030903837bbb2b91037b310191760511b606482015260840162000cae565b60006200306f610100836200421d565b90506000816001600160401b038111156200308e576200308e62003c21565b604051908082528060200260200182016040528015620030b8578160200160208202803683370190505b50905060005b828110156200310d5761010081810287016020012082518190849084908110620030ec57620030ec620042b3565b602090810291909101015250806200310481620042c9565b915050620030be565b505b600182111562003205576000620031286002846200421d565b905060005b81811015620031fc57620031c783620031488360026200424a565b815181106200315b576200315b620042b3565b6020026020010151848360026200317391906200424a565b6200318090600162004234565b81518110620031935762003193620042b3565b6020026020010151604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b838281518110620031dc57620031dc620042b3565b602090810291909101015280620031f381620042c9565b9150506200312d565b5091506200310f565b806000815181106200321b576200321b620042b3565b60200260200101519350505050919050565b8360005b8351811015620032fe576000848281518110620032525762003252620042b3565b602002602001015190506002846200326b9190620044a9565b6001600160401b0316600003620032ac57604080516020808201869052818301849052825180830384018152606090920190925280519101209250620032d7565b6040805160208082018490528183018690528251808303840181526060909201909252805191012092505b6001846001600160401b0316901c9350508080620032f590620042c9565b91505062003231565b5083811462000c3a5760405162461bcd60e51b8152602060048201526013602482015272125b98dbdc9c9958dd08189b1bd888149bdbdd606a1b604482015260640162000cae565b80620033528362003876565b1462000b7f5760405162461bcd60e51b8152602060048201526012602482015271125b98dbdc9c9958dd0819185d18549bdbdd60721b604482015260640162000cae565b606062000ae56001600160a01b03831660145b60606000620033ba8360026200424a565b620033c790600262004234565b6001600160401b03811115620033e157620033e162003c21565b6040519080825280601f01601f1916602001820160405280156200340c576020820181803683370190505b509050600360fc1b816000815181106200342a576200342a620042b3565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106200345c576200345c620042b3565b60200101906001600160f81b031916908160001a9053506000620034828460026200424a565b6200348f90600162004234565b90505b600181111562003511576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110620034c757620034c7620042b3565b1a60f81b828281518110620034e057620034e0620042b3565b60200101906001600160f81b031916908160001a90535060049490941c936200350981620045b2565b905062003492565b5083156200116d5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640162000cae565b6000818152600183016020526040812054620035ab5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000ae5565b50600062000ae5565b60008181526001830160205260408120548015620036ad576000620035db6001836200426c565b8554909150600090620035f1906001906200426c565b90508181146200365d576000866000018281548110620036155762003615620042b3565b90600052602060002001549050808760000184815481106200363b576200363b620042b3565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080620036715762003671620045cc565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505062000ae5565b600091505062000ae5565b5092915050565b80471015620037115760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640162000cae565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811462003760576040519150601f19603f3d011682016040523d82523d6000602084013e62003765565b606091505b505090508062000bd85760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840162000cae565b6040805180820190915260008082526020820152600080806200381160008051602062004b6f833981519152866200429c565b90505b6200381f81620038c3565b909350915060008051602062004b6f83398151915282830983036200385a576040805180820190915290815260208101919091529392505050565b60008051602062004b6f83398151915260018208905062003814565b805160009062000ae590620038ba908460015b6020020151604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b83600262003889565b6000808060008051602062004b6f833981519152600360008051602062004b6f8339815191528660008051602062004b6f8339815191528889090908905060006200393f827f0c19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f5260008051602062004b6f8339815191526200394b565b91959194509092505050565b6000806200395862003a8d565b6200396262003aab565b602080825281810181905260408201819052606082018890526080820187905260a082018690528260c08360056107d05a03fa92508280620039a057fe5b5082620039f05760405162461bcd60e51b815260206004820152601a60248201527f424e3235342e6578704d6f643a2063616c6c206661696c757265000000000000604482015260640162000cae565b505195945050505050565b61058c80620045e383390190565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b604051806040016040528062003a5a62003ac9565b815260200162003a6962003ac9565b905290565b604051806101800160405280600c906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b6040518060c001604052806006906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b60006020828403121562003afa57600080fd5b81356001600160e01b0319811681146200116d57600080fd5b60006020828403121562003b2657600080fd5b5035919050565b80356001600160401b038116811462003b4557600080fd5b919050565b60006020828403121562003b5d57600080fd5b6200116d8262003b2d565b6001600160a01b038116811462001f9c57600080fd5b6000806040838503121562003b9257600080fd5b82359150602083013562003ba68162003b68565b809150509250929050565b60006020828403121562003bc457600080fd5b81356200116d8162003b68565b60008060006060848603121562003be757600080fd5b505081359360208301359350604090920135919050565b6000806040838503121562003c1257600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b038111828210171562003c5c5762003c5c62003c21565b60405290565b60405160e081016001600160401b038111828210171562003c5c5762003c5c62003c21565b60405161014081016001600160401b038111828210171562003c5c5762003c5c62003c21565b604051601f8201601f191681016001600160401b038111828210171562003cd85762003cd862003c21565b604052919050565b60006001600160401b0382111562003cfc5762003cfc62003c21565b5060051b60200190565b600082601f83011262003d1857600080fd5b8135602062003d3162003d2b8362003ce0565b62003cad565b82815260059290921b8401810191818101908684111562003d5157600080fd5b8286015b8481101562003d6e578035835291830191830162003d55565b509695505050505050565b60006020828403121562003d8c57600080fd5b81356001600160401b0381111562003da357600080fd5b62003db18482850162003d06565b949350505050565b60006040828403121562003dcc57600080fd5b62003dd662003c37565b9050813581526020820135602082015292915050565b600082601f83011262003dfe57600080fd5b81356001600160401b0381111562003e1a5762003e1a62003c21565b62003e2f601f8201601f191660200162003cad565b81815284602083860101111562003e4557600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011262003e7457600080fd5b604051604081018181106001600160401b038211171562003e995762003e9962003c21565b806040525080604084018581111562003eb157600080fd5b845b8181101562003ecd57803583526020928301920162003eb3565b509195945050505050565b60006080828403121562003eeb57600080fd5b62003ef562003c37565b905062003f03838362003e62565b815262003f14836040840162003e62565b602082015292915050565b6000602080838503121562003f3357600080fd5b82356001600160401b038082111562003f4b57600080fd5b818501915085601f83011262003f6057600080fd5b813562003f7162003d2b8262003ce0565b81815260059190911b8301840190848101908883111562003f9157600080fd5b8585015b83811015620040645780358581111562003faf5760008081fd5b8601610180818c03601f1901121562003fc85760008081fd5b62003fd262003c62565b8882013581526040808301358a830152606080840135828401526080915062003ffe8e83860162003db9565b9083015260c08381013589811115620040175760008081fd5b620040278f8d8388010162003dec565b83850152506200403b8e60e0860162003ed8565b60a0840152620040508e610160860162003db9565b908301525084525091860191860162003f95565b5098975050505050505050565b803563ffffffff8116811462003b4557600080fd5b600082601f8301126200409857600080fd5b604051606081018181106001600160401b0382111715620040bd57620040bd62003c21565b60405280606084018581111562003eb157600080fd5b600060208284031215620040e657600080fd5b81356001600160401b0380821115620040fe57600080fd5b9083019061018082860312156200411457600080fd5b6200411e62003c87565b82358152620041306020840162003b2d565b6020820152620041436040840162003b2d565b6040820152620041566060840162004071565b6060820152620041696080840162004071565b608082015260a083013560a082015260c083013560c0820152620041918660e0850162004086565b60e082015261014083013582811115620041aa57600080fd5b620041b88782860162003d06565b6101008301525061016083013582811115620041d357600080fd5b620041e18782860162003dec565b6101208301525095945050505050565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000826200422f576200422f620041f1565b500490565b8082018082111562000ae55762000ae562004207565b600081600019048311821515161562004267576200426762004207565b500290565b8181038181111562000ae55762000ae562004207565b6000602082840312156200429557600080fd5b5051919050565b600082620042ae57620042ae620041f1565b500690565b634e487b7160e01b600052603260045260246000fd5b600060018201620042de57620042de62004207565b5060010190565b60005b8381101562004302578181015183820152602001620042e8565b50506000910152565b6000815180845262004325816020860160208601620042e5565b601f01601f19169290920160200192915050565b8381528260208201526060604082015260006200435a60608301846200430b565b95945050505050565b600080600083850360808112156200437a57600080fd5b60408112156200438957600080fd5b506200439462003c37565b8451815260208086015190820152604085015160609095015190969495509392505050565b600060208284031215620043cc57600080fd5b81516200116d8162003b68565b8060005b600281101562001560578151845260209384019390910190600101620043dd565b888152876020820152866040820152856060820152620044226080820186620043d9565b6200443160c0820185620043d9565b610100810192909252610120820152610140019695505050505050565b60006001600160401b038083168185168183048111821515161562004477576200447762004207565b02949350505050565b60006001600160401b03808416806200449d576200449d620041f1565b92169190910492915050565b60006001600160401b0380841680620044c657620044c6620041f1565b92169190910692915050565b6001600160401b03818116838216019080821115620036b857620036b862004207565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516200452f816017850160208801620042e5565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835162004562816028840160208801620042e5565b01602801949350505050565b6020815260006200116d60208301846200430b565b83815282602082015260008251620045a3816040850160208701620042e5565b91909101604001949350505050565b600081620045c457620045c462004207565b506000190190565b634e487b7160e01b600052603160045260246000fdfe608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61050e8061007e6000396000f3fe6080604052600436106100555760003560e01c806351cff8d91461005a578063715018a61461007c5780638da5cb5b14610091578063e3a9db1a146100be578063f2fde38b14610102578063f340fa0114610122575b600080fd5b34801561006657600080fd5b5061007a61007536600461048d565b610135565b005b34801561008857600080fd5b5061007a6101ac565b34801561009d57600080fd5b506000546040516001600160a01b0390911681526020015b60405180910390f35b3480156100ca57600080fd5b506100f46100d936600461048d565b6001600160a01b031660009081526001602052604090205490565b6040519081526020016100b5565b34801561010e57600080fd5b5061007a61011d36600461048d565b6101c0565b61007a61013036600461048d565b61023e565b61013d6102b0565b6001600160a01b0381166000818152600160205260408120805491905590610165908261030a565b816001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5826040516101a091815260200190565b60405180910390a25050565b6101b46102b0565b6101be6000610428565b565b6101c86102b0565b6001600160a01b0381166102325760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61023b81610428565b50565b6102466102b0565b6001600160a01b0381166000908152600160205260408120805434928392916102709084906104b1565b90915550506040518181526001600160a01b038316907f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4906020016101a0565b6000546001600160a01b031633146101be5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610229565b8047101561035a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610229565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146103a7576040519150601f19603f3d011682016040523d82523d6000602084013e6103ac565b606091505b50509050806104235760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610229565b505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461023b57600080fd5b60006020828403121561049f57600080fd5b81356104aa81610478565b9392505050565b808201808211156104d257634e487b7160e01b600052601160045260246000fd5b9291505056fea26469706673582212206fb4f990ff997db88feee170cb2b7ab9937e85cb31861a96846a4d809d251fab64736f6c6343000810003330644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47b9d69e0ca90be54a40811e436234a7f7908b87ff2bec27e64f878b166da8e8e5a2646970667358221220b84540e3e4aa558cfc956baafbda4a7f7366cb5d01e59e24e125808bf7bb94fa64736f6c63430008100033",
}

// DAEntranceABI is the input ABI used to generate the binding from.
// Deprecated: Use DAEntranceMetaData.ABI instead.
var DAEntranceABI = DAEntranceMetaData.ABI

// DAEntranceBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DAEntranceMetaData.Bin instead.
var DAEntranceBin = DAEntranceMetaData.Bin

// DeployDAEntrance deploys a new Ethereum contract, binding an instance of DAEntrance to it.
func DeployDAEntrance(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *DAEntrance, error) {
	parsed, err := DAEntranceMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DAEntranceBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DAEntrance{DAEntranceCaller: DAEntranceCaller{contract: contract}, DAEntranceTransactor: DAEntranceTransactor{contract: contract}, DAEntranceFilterer: DAEntranceFilterer{contract: contract}}, nil
}

// DAEntrance is an auto generated Go binding around an Ethereum contract.
type DAEntrance struct {
	DAEntranceCaller     // Read-only binding to the contract
	DAEntranceTransactor // Write-only binding to the contract
	DAEntranceFilterer   // Log filterer for contract events
}

// DAEntranceCaller is an auto generated read-only Go binding around an Ethereum contract.
type DAEntranceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DAEntranceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DAEntranceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DAEntranceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DAEntranceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DAEntranceSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DAEntranceSession struct {
	Contract     *DAEntrance       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DAEntranceCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DAEntranceCallerSession struct {
	Contract *DAEntranceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// DAEntranceTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DAEntranceTransactorSession struct {
	Contract     *DAEntranceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// DAEntranceRaw is an auto generated low-level Go binding around an Ethereum contract.
type DAEntranceRaw struct {
	Contract *DAEntrance // Generic contract binding to access the raw methods on
}

// DAEntranceCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DAEntranceCallerRaw struct {
	Contract *DAEntranceCaller // Generic read-only contract binding to access the raw methods on
}

// DAEntranceTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DAEntranceTransactorRaw struct {
	Contract *DAEntranceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDAEntrance creates a new instance of DAEntrance, bound to a specific deployed contract.
func NewDAEntrance(address common.Address, backend bind.ContractBackend) (*DAEntrance, error) {
	contract, err := bindDAEntrance(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DAEntrance{DAEntranceCaller: DAEntranceCaller{contract: contract}, DAEntranceTransactor: DAEntranceTransactor{contract: contract}, DAEntranceFilterer: DAEntranceFilterer{contract: contract}}, nil
}

// NewDAEntranceCaller creates a new read-only instance of DAEntrance, bound to a specific deployed contract.
func NewDAEntranceCaller(address common.Address, caller bind.ContractCaller) (*DAEntranceCaller, error) {
	contract, err := bindDAEntrance(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DAEntranceCaller{contract: contract}, nil
}

// NewDAEntranceTransactor creates a new write-only instance of DAEntrance, bound to a specific deployed contract.
func NewDAEntranceTransactor(address common.Address, transactor bind.ContractTransactor) (*DAEntranceTransactor, error) {
	contract, err := bindDAEntrance(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DAEntranceTransactor{contract: contract}, nil
}

// NewDAEntranceFilterer creates a new log filterer instance of DAEntrance, bound to a specific deployed contract.
func NewDAEntranceFilterer(address common.Address, filterer bind.ContractFilterer) (*DAEntranceFilterer, error) {
	contract, err := bindDAEntrance(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DAEntranceFilterer{contract: contract}, nil
}

// bindDAEntrance binds a generic wrapper to an already deployed contract.
func bindDAEntrance(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := DAEntranceMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DAEntrance *DAEntranceRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DAEntrance.Contract.DAEntranceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DAEntrance *DAEntranceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DAEntrance.Contract.DAEntranceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DAEntrance *DAEntranceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DAEntrance.Contract.DAEntranceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DAEntrance *DAEntranceCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DAEntrance.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DAEntrance *DAEntranceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DAEntrance.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DAEntrance *DAEntranceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DAEntrance.Contract.contract.Transact(opts, method, params...)
}

// DASIGNERS is a free data retrieval call binding the contract method 0x807f063a.
//
// Solidity: function DA_SIGNERS() view returns(address)
func (_DAEntrance *DAEntranceCaller) DASIGNERS(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "DA_SIGNERS")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// DASIGNERS is a free data retrieval call binding the contract method 0x807f063a.
//
// Solidity: function DA_SIGNERS() view returns(address)
func (_DAEntrance *DAEntranceSession) DASIGNERS() (common.Address, error) {
	return _DAEntrance.Contract.DASIGNERS(&_DAEntrance.CallOpts)
}

// DASIGNERS is a free data retrieval call binding the contract method 0x807f063a.
//
// Solidity: function DA_SIGNERS() view returns(address)
func (_DAEntrance *DAEntranceCallerSession) DASIGNERS() (common.Address, error) {
	return _DAEntrance.Contract.DASIGNERS(&_DAEntrance.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_DAEntrance *DAEntranceCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_DAEntrance *DAEntranceSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _DAEntrance.Contract.DEFAULTADMINROLE(&_DAEntrance.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_DAEntrance *DAEntranceCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _DAEntrance.Contract.DEFAULTADMINROLE(&_DAEntrance.CallOpts)
}

// MAXPODASTARGET is a free data retrieval call binding the contract method 0x8bdcc712.
//
// Solidity: function MAX_PODAS_TARGET() view returns(uint256)
func (_DAEntrance *DAEntranceCaller) MAXPODASTARGET(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "MAX_PODAS_TARGET")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXPODASTARGET is a free data retrieval call binding the contract method 0x8bdcc712.
//
// Solidity: function MAX_PODAS_TARGET() view returns(uint256)
func (_DAEntrance *DAEntranceSession) MAXPODASTARGET() (*big.Int, error) {
	return _DAEntrance.Contract.MAXPODASTARGET(&_DAEntrance.CallOpts)
}

// MAXPODASTARGET is a free data retrieval call binding the contract method 0x8bdcc712.
//
// Solidity: function MAX_PODAS_TARGET() view returns(uint256)
func (_DAEntrance *DAEntranceCallerSession) MAXPODASTARGET() (*big.Int, error) {
	return _DAEntrance.Contract.MAXPODASTARGET(&_DAEntrance.CallOpts)
}

// PARAMSADMINROLE is a free data retrieval call binding the contract method 0xb15d20da.
//
// Solidity: function PARAMS_ADMIN_ROLE() view returns(bytes32)
func (_DAEntrance *DAEntranceCaller) PARAMSADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "PARAMS_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PARAMSADMINROLE is a free data retrieval call binding the contract method 0xb15d20da.
//
// Solidity: function PARAMS_ADMIN_ROLE() view returns(bytes32)
func (_DAEntrance *DAEntranceSession) PARAMSADMINROLE() ([32]byte, error) {
	return _DAEntrance.Contract.PARAMSADMINROLE(&_DAEntrance.CallOpts)
}

// PARAMSADMINROLE is a free data retrieval call binding the contract method 0xb15d20da.
//
// Solidity: function PARAMS_ADMIN_ROLE() view returns(bytes32)
func (_DAEntrance *DAEntranceCallerSession) PARAMSADMINROLE() ([32]byte, error) {
	return _DAEntrance.Contract.PARAMSADMINROLE(&_DAEntrance.CallOpts)
}

// SLICEDENOMINATOR is a free data retrieval call binding the contract method 0x602b245a.
//
// Solidity: function SLICE_DENOMINATOR() view returns(uint256)
func (_DAEntrance *DAEntranceCaller) SLICEDENOMINATOR(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "SLICE_DENOMINATOR")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SLICEDENOMINATOR is a free data retrieval call binding the contract method 0x602b245a.
//
// Solidity: function SLICE_DENOMINATOR() view returns(uint256)
func (_DAEntrance *DAEntranceSession) SLICEDENOMINATOR() (*big.Int, error) {
	return _DAEntrance.Contract.SLICEDENOMINATOR(&_DAEntrance.CallOpts)
}

// SLICEDENOMINATOR is a free data retrieval call binding the contract method 0x602b245a.
//
// Solidity: function SLICE_DENOMINATOR() view returns(uint256)
func (_DAEntrance *DAEntranceCallerSession) SLICEDENOMINATOR() (*big.Int, error) {
	return _DAEntrance.Contract.SLICEDENOMINATOR(&_DAEntrance.CallOpts)
}

// SLICENUMERATOR is a free data retrieval call binding the contract method 0x5626a47b.
//
// Solidity: function SLICE_NUMERATOR() view returns(uint256)
func (_DAEntrance *DAEntranceCaller) SLICENUMERATOR(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "SLICE_NUMERATOR")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SLICENUMERATOR is a free data retrieval call binding the contract method 0x5626a47b.
//
// Solidity: function SLICE_NUMERATOR() view returns(uint256)
func (_DAEntrance *DAEntranceSession) SLICENUMERATOR() (*big.Int, error) {
	return _DAEntrance.Contract.SLICENUMERATOR(&_DAEntrance.CallOpts)
}

// SLICENUMERATOR is a free data retrieval call binding the contract method 0x5626a47b.
//
// Solidity: function SLICE_NUMERATOR() view returns(uint256)
func (_DAEntrance *DAEntranceCallerSession) SLICENUMERATOR() (*big.Int, error) {
	return _DAEntrance.Contract.SLICENUMERATOR(&_DAEntrance.CallOpts)
}

// ActivedReward is a free data retrieval call binding the contract method 0x12577052.
//
// Solidity: function activedReward() view returns(uint256)
func (_DAEntrance *DAEntranceCaller) ActivedReward(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "activedReward")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ActivedReward is a free data retrieval call binding the contract method 0x12577052.
//
// Solidity: function activedReward() view returns(uint256)
func (_DAEntrance *DAEntranceSession) ActivedReward() (*big.Int, error) {
	return _DAEntrance.Contract.ActivedReward(&_DAEntrance.CallOpts)
}

// ActivedReward is a free data retrieval call binding the contract method 0x12577052.
//
// Solidity: function activedReward() view returns(uint256)
func (_DAEntrance *DAEntranceCallerSession) ActivedReward() (*big.Int, error) {
	return _DAEntrance.Contract.ActivedReward(&_DAEntrance.CallOpts)
}

// BaseReward is a free data retrieval call binding the contract method 0x76ad03bc.
//
// Solidity: function baseReward() view returns(uint256)
func (_DAEntrance *DAEntranceCaller) BaseReward(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "baseReward")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BaseReward is a free data retrieval call binding the contract method 0x76ad03bc.
//
// Solidity: function baseReward() view returns(uint256)
func (_DAEntrance *DAEntranceSession) BaseReward() (*big.Int, error) {
	return _DAEntrance.Contract.BaseReward(&_DAEntrance.CallOpts)
}

// BaseReward is a free data retrieval call binding the contract method 0x76ad03bc.
//
// Solidity: function baseReward() view returns(uint256)
func (_DAEntrance *DAEntranceCallerSession) BaseReward() (*big.Int, error) {
	return _DAEntrance.Contract.BaseReward(&_DAEntrance.CallOpts)
}

// BlobPrice is a free data retrieval call binding the contract method 0x3d00448a.
//
// Solidity: function blobPrice() view returns(uint256)
func (_DAEntrance *DAEntranceCaller) BlobPrice(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "blobPrice")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BlobPrice is a free data retrieval call binding the contract method 0x3d00448a.
//
// Solidity: function blobPrice() view returns(uint256)
func (_DAEntrance *DAEntranceSession) BlobPrice() (*big.Int, error) {
	return _DAEntrance.Contract.BlobPrice(&_DAEntrance.CallOpts)
}

// BlobPrice is a free data retrieval call binding the contract method 0x3d00448a.
//
// Solidity: function blobPrice() view returns(uint256)
func (_DAEntrance *DAEntranceCallerSession) BlobPrice() (*big.Int, error) {
	return _DAEntrance.Contract.BlobPrice(&_DAEntrance.CallOpts)
}

// CommitmentExists is a free data retrieval call binding the contract method 0x6a53525d.
//
// Solidity: function commitmentExists(bytes32 _dataRoot, uint256 _epoch, uint256 _quorumId) view returns(bool)
func (_DAEntrance *DAEntranceCaller) CommitmentExists(opts *bind.CallOpts, _dataRoot [32]byte, _epoch *big.Int, _quorumId *big.Int) (bool, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "commitmentExists", _dataRoot, _epoch, _quorumId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CommitmentExists is a free data retrieval call binding the contract method 0x6a53525d.
//
// Solidity: function commitmentExists(bytes32 _dataRoot, uint256 _epoch, uint256 _quorumId) view returns(bool)
func (_DAEntrance *DAEntranceSession) CommitmentExists(_dataRoot [32]byte, _epoch *big.Int, _quorumId *big.Int) (bool, error) {
	return _DAEntrance.Contract.CommitmentExists(&_DAEntrance.CallOpts, _dataRoot, _epoch, _quorumId)
}

// CommitmentExists is a free data retrieval call binding the contract method 0x6a53525d.
//
// Solidity: function commitmentExists(bytes32 _dataRoot, uint256 _epoch, uint256 _quorumId) view returns(bool)
func (_DAEntrance *DAEntranceCallerSession) CommitmentExists(_dataRoot [32]byte, _epoch *big.Int, _quorumId *big.Int) (bool, error) {
	return _DAEntrance.Contract.CommitmentExists(&_DAEntrance.CallOpts, _dataRoot, _epoch, _quorumId)
}

// CurrentEpoch is a free data retrieval call binding the contract method 0x76671808.
//
// Solidity: function currentEpoch() view returns(uint256)
func (_DAEntrance *DAEntranceCaller) CurrentEpoch(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "currentEpoch")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrentEpoch is a free data retrieval call binding the contract method 0x76671808.
//
// Solidity: function currentEpoch() view returns(uint256)
func (_DAEntrance *DAEntranceSession) CurrentEpoch() (*big.Int, error) {
	return _DAEntrance.Contract.CurrentEpoch(&_DAEntrance.CallOpts)
}

// CurrentEpoch is a free data retrieval call binding the contract method 0x76671808.
//
// Solidity: function currentEpoch() view returns(uint256)
func (_DAEntrance *DAEntranceCallerSession) CurrentEpoch() (*big.Int, error) {
	return _DAEntrance.Contract.CurrentEpoch(&_DAEntrance.CallOpts)
}

// CurrentEpochReward is a free data retrieval call binding the contract method 0xe68e035b.
//
// Solidity: function currentEpochReward() view returns(uint256)
func (_DAEntrance *DAEntranceCaller) CurrentEpochReward(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "currentEpochReward")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrentEpochReward is a free data retrieval call binding the contract method 0xe68e035b.
//
// Solidity: function currentEpochReward() view returns(uint256)
func (_DAEntrance *DAEntranceSession) CurrentEpochReward() (*big.Int, error) {
	return _DAEntrance.Contract.CurrentEpochReward(&_DAEntrance.CallOpts)
}

// CurrentEpochReward is a free data retrieval call binding the contract method 0xe68e035b.
//
// Solidity: function currentEpochReward() view returns(uint256)
func (_DAEntrance *DAEntranceCallerSession) CurrentEpochReward() (*big.Int, error) {
	return _DAEntrance.Contract.CurrentEpochReward(&_DAEntrance.CallOpts)
}

// CurrentSampleSeed is a free data retrieval call binding the contract method 0x9fae1fa4.
//
// Solidity: function currentSampleSeed() view returns(bytes32)
func (_DAEntrance *DAEntranceCaller) CurrentSampleSeed(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "currentSampleSeed")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CurrentSampleSeed is a free data retrieval call binding the contract method 0x9fae1fa4.
//
// Solidity: function currentSampleSeed() view returns(bytes32)
func (_DAEntrance *DAEntranceSession) CurrentSampleSeed() ([32]byte, error) {
	return _DAEntrance.Contract.CurrentSampleSeed(&_DAEntrance.CallOpts)
}

// CurrentSampleSeed is a free data retrieval call binding the contract method 0x9fae1fa4.
//
// Solidity: function currentSampleSeed() view returns(bytes32)
func (_DAEntrance *DAEntranceCallerSession) CurrentSampleSeed() ([32]byte, error) {
	return _DAEntrance.Contract.CurrentSampleSeed(&_DAEntrance.CallOpts)
}

// EpochWindowSize is a free data retrieval call binding the contract method 0x3e898337.
//
// Solidity: function epochWindowSize() view returns(uint256)
func (_DAEntrance *DAEntranceCaller) EpochWindowSize(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "epochWindowSize")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EpochWindowSize is a free data retrieval call binding the contract method 0x3e898337.
//
// Solidity: function epochWindowSize() view returns(uint256)
func (_DAEntrance *DAEntranceSession) EpochWindowSize() (*big.Int, error) {
	return _DAEntrance.Contract.EpochWindowSize(&_DAEntrance.CallOpts)
}

// EpochWindowSize is a free data retrieval call binding the contract method 0x3e898337.
//
// Solidity: function epochWindowSize() view returns(uint256)
func (_DAEntrance *DAEntranceCallerSession) EpochWindowSize() (*big.Int, error) {
	return _DAEntrance.Contract.EpochWindowSize(&_DAEntrance.CallOpts)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_DAEntrance *DAEntranceCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_DAEntrance *DAEntranceSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _DAEntrance.Contract.GetRoleAdmin(&_DAEntrance.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_DAEntrance *DAEntranceCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _DAEntrance.Contract.GetRoleAdmin(&_DAEntrance.CallOpts, role)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_DAEntrance *DAEntranceCaller) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "getRoleMember", role, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_DAEntrance *DAEntranceSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _DAEntrance.Contract.GetRoleMember(&_DAEntrance.CallOpts, role, index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_DAEntrance *DAEntranceCallerSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _DAEntrance.Contract.GetRoleMember(&_DAEntrance.CallOpts, role, index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_DAEntrance *DAEntranceCaller) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "getRoleMemberCount", role)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_DAEntrance *DAEntranceSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _DAEntrance.Contract.GetRoleMemberCount(&_DAEntrance.CallOpts, role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_DAEntrance *DAEntranceCallerSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _DAEntrance.Contract.GetRoleMemberCount(&_DAEntrance.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_DAEntrance *DAEntranceCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_DAEntrance *DAEntranceSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _DAEntrance.Contract.HasRole(&_DAEntrance.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_DAEntrance *DAEntranceCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _DAEntrance.Contract.HasRole(&_DAEntrance.CallOpts, role, account)
}

// Initialized is a free data retrieval call binding the contract method 0x158ef93e.
//
// Solidity: function initialized() view returns(bool)
func (_DAEntrance *DAEntranceCaller) Initialized(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "initialized")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Initialized is a free data retrieval call binding the contract method 0x158ef93e.
//
// Solidity: function initialized() view returns(bool)
func (_DAEntrance *DAEntranceSession) Initialized() (bool, error) {
	return _DAEntrance.Contract.Initialized(&_DAEntrance.CallOpts)
}

// Initialized is a free data retrieval call binding the contract method 0x158ef93e.
//
// Solidity: function initialized() view returns(bool)
func (_DAEntrance *DAEntranceCallerSession) Initialized() (bool, error) {
	return _DAEntrance.Contract.Initialized(&_DAEntrance.CallOpts)
}

// NextSampleHeight is a free data retrieval call binding the contract method 0x7397eb33.
//
// Solidity: function nextSampleHeight() view returns(uint256)
func (_DAEntrance *DAEntranceCaller) NextSampleHeight(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "nextSampleHeight")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NextSampleHeight is a free data retrieval call binding the contract method 0x7397eb33.
//
// Solidity: function nextSampleHeight() view returns(uint256)
func (_DAEntrance *DAEntranceSession) NextSampleHeight() (*big.Int, error) {
	return _DAEntrance.Contract.NextSampleHeight(&_DAEntrance.CallOpts)
}

// NextSampleHeight is a free data retrieval call binding the contract method 0x7397eb33.
//
// Solidity: function nextSampleHeight() view returns(uint256)
func (_DAEntrance *DAEntranceCallerSession) NextSampleHeight() (*big.Int, error) {
	return _DAEntrance.Contract.NextSampleHeight(&_DAEntrance.CallOpts)
}

// Payments is a free data retrieval call binding the contract method 0xe2982c21.
//
// Solidity: function payments(address dest) view returns(uint256)
func (_DAEntrance *DAEntranceCaller) Payments(opts *bind.CallOpts, dest common.Address) (*big.Int, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "payments", dest)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Payments is a free data retrieval call binding the contract method 0xe2982c21.
//
// Solidity: function payments(address dest) view returns(uint256)
func (_DAEntrance *DAEntranceSession) Payments(dest common.Address) (*big.Int, error) {
	return _DAEntrance.Contract.Payments(&_DAEntrance.CallOpts, dest)
}

// Payments is a free data retrieval call binding the contract method 0xe2982c21.
//
// Solidity: function payments(address dest) view returns(uint256)
func (_DAEntrance *DAEntranceCallerSession) Payments(dest common.Address) (*big.Int, error) {
	return _DAEntrance.Contract.Payments(&_DAEntrance.CallOpts, dest)
}

// PodasTarget is a free data retrieval call binding the contract method 0xc8d3b359.
//
// Solidity: function podasTarget() view returns(uint256)
func (_DAEntrance *DAEntranceCaller) PodasTarget(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "podasTarget")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PodasTarget is a free data retrieval call binding the contract method 0xc8d3b359.
//
// Solidity: function podasTarget() view returns(uint256)
func (_DAEntrance *DAEntranceSession) PodasTarget() (*big.Int, error) {
	return _DAEntrance.Contract.PodasTarget(&_DAEntrance.CallOpts)
}

// PodasTarget is a free data retrieval call binding the contract method 0xc8d3b359.
//
// Solidity: function podasTarget() view returns(uint256)
func (_DAEntrance *DAEntranceCallerSession) PodasTarget() (*big.Int, error) {
	return _DAEntrance.Contract.PodasTarget(&_DAEntrance.CallOpts)
}

// RewardRatio is a free data retrieval call binding the contract method 0x646033bc.
//
// Solidity: function rewardRatio() view returns(uint256)
func (_DAEntrance *DAEntranceCaller) RewardRatio(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "rewardRatio")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RewardRatio is a free data retrieval call binding the contract method 0x646033bc.
//
// Solidity: function rewardRatio() view returns(uint256)
func (_DAEntrance *DAEntranceSession) RewardRatio() (*big.Int, error) {
	return _DAEntrance.Contract.RewardRatio(&_DAEntrance.CallOpts)
}

// RewardRatio is a free data retrieval call binding the contract method 0x646033bc.
//
// Solidity: function rewardRatio() view returns(uint256)
func (_DAEntrance *DAEntranceCallerSession) RewardRatio() (*big.Int, error) {
	return _DAEntrance.Contract.RewardRatio(&_DAEntrance.CallOpts)
}

// RoundSubmissions is a free data retrieval call binding the contract method 0xff187748.
//
// Solidity: function roundSubmissions() view returns(uint256)
func (_DAEntrance *DAEntranceCaller) RoundSubmissions(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "roundSubmissions")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RoundSubmissions is a free data retrieval call binding the contract method 0xff187748.
//
// Solidity: function roundSubmissions() view returns(uint256)
func (_DAEntrance *DAEntranceSession) RoundSubmissions() (*big.Int, error) {
	return _DAEntrance.Contract.RoundSubmissions(&_DAEntrance.CallOpts)
}

// RoundSubmissions is a free data retrieval call binding the contract method 0xff187748.
//
// Solidity: function roundSubmissions() view returns(uint256)
func (_DAEntrance *DAEntranceCallerSession) RoundSubmissions() (*big.Int, error) {
	return _DAEntrance.Contract.RoundSubmissions(&_DAEntrance.CallOpts)
}

// SamplePeriod is a free data retrieval call binding the contract method 0x98920f57.
//
// Solidity: function samplePeriod() view returns(uint256)
func (_DAEntrance *DAEntranceCaller) SamplePeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "samplePeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SamplePeriod is a free data retrieval call binding the contract method 0x98920f57.
//
// Solidity: function samplePeriod() view returns(uint256)
func (_DAEntrance *DAEntranceSession) SamplePeriod() (*big.Int, error) {
	return _DAEntrance.Contract.SamplePeriod(&_DAEntrance.CallOpts)
}

// SamplePeriod is a free data retrieval call binding the contract method 0x98920f57.
//
// Solidity: function samplePeriod() view returns(uint256)
func (_DAEntrance *DAEntranceCallerSession) SamplePeriod() (*big.Int, error) {
	return _DAEntrance.Contract.SamplePeriod(&_DAEntrance.CallOpts)
}

// SampleRound is a free data retrieval call binding the contract method 0x168a062c.
//
// Solidity: function sampleRound() view returns(uint256)
func (_DAEntrance *DAEntranceCaller) SampleRound(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "sampleRound")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SampleRound is a free data retrieval call binding the contract method 0x168a062c.
//
// Solidity: function sampleRound() view returns(uint256)
func (_DAEntrance *DAEntranceSession) SampleRound() (*big.Int, error) {
	return _DAEntrance.Contract.SampleRound(&_DAEntrance.CallOpts)
}

// SampleRound is a free data retrieval call binding the contract method 0x168a062c.
//
// Solidity: function sampleRound() view returns(uint256)
func (_DAEntrance *DAEntranceCallerSession) SampleRound() (*big.Int, error) {
	return _DAEntrance.Contract.SampleRound(&_DAEntrance.CallOpts)
}

// ServiceFee is a free data retrieval call binding the contract method 0x8abdf5aa.
//
// Solidity: function serviceFee() view returns(uint256)
func (_DAEntrance *DAEntranceCaller) ServiceFee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "serviceFee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ServiceFee is a free data retrieval call binding the contract method 0x8abdf5aa.
//
// Solidity: function serviceFee() view returns(uint256)
func (_DAEntrance *DAEntranceSession) ServiceFee() (*big.Int, error) {
	return _DAEntrance.Contract.ServiceFee(&_DAEntrance.CallOpts)
}

// ServiceFee is a free data retrieval call binding the contract method 0x8abdf5aa.
//
// Solidity: function serviceFee() view returns(uint256)
func (_DAEntrance *DAEntranceCallerSession) ServiceFee() (*big.Int, error) {
	return _DAEntrance.Contract.ServiceFee(&_DAEntrance.CallOpts)
}

// ServiceFeeRateBps is a free data retrieval call binding the contract method 0xc0575111.
//
// Solidity: function serviceFeeRateBps() view returns(uint256)
func (_DAEntrance *DAEntranceCaller) ServiceFeeRateBps(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "serviceFeeRateBps")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ServiceFeeRateBps is a free data retrieval call binding the contract method 0xc0575111.
//
// Solidity: function serviceFeeRateBps() view returns(uint256)
func (_DAEntrance *DAEntranceSession) ServiceFeeRateBps() (*big.Int, error) {
	return _DAEntrance.Contract.ServiceFeeRateBps(&_DAEntrance.CallOpts)
}

// ServiceFeeRateBps is a free data retrieval call binding the contract method 0xc0575111.
//
// Solidity: function serviceFeeRateBps() view returns(uint256)
func (_DAEntrance *DAEntranceCallerSession) ServiceFeeRateBps() (*big.Int, error) {
	return _DAEntrance.Contract.ServiceFeeRateBps(&_DAEntrance.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_DAEntrance *DAEntranceCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_DAEntrance *DAEntranceSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _DAEntrance.Contract.SupportsInterface(&_DAEntrance.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_DAEntrance *DAEntranceCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _DAEntrance.Contract.SupportsInterface(&_DAEntrance.CallOpts, interfaceId)
}

// TargetRoundSubmissions is a free data retrieval call binding the contract method 0x2fc0534b.
//
// Solidity: function targetRoundSubmissions() view returns(uint256)
func (_DAEntrance *DAEntranceCaller) TargetRoundSubmissions(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "targetRoundSubmissions")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TargetRoundSubmissions is a free data retrieval call binding the contract method 0x2fc0534b.
//
// Solidity: function targetRoundSubmissions() view returns(uint256)
func (_DAEntrance *DAEntranceSession) TargetRoundSubmissions() (*big.Int, error) {
	return _DAEntrance.Contract.TargetRoundSubmissions(&_DAEntrance.CallOpts)
}

// TargetRoundSubmissions is a free data retrieval call binding the contract method 0x2fc0534b.
//
// Solidity: function targetRoundSubmissions() view returns(uint256)
func (_DAEntrance *DAEntranceCallerSession) TargetRoundSubmissions() (*big.Int, error) {
	return _DAEntrance.Contract.TargetRoundSubmissions(&_DAEntrance.CallOpts)
}

// TargetRoundSubmissionsNext is a free data retrieval call binding the contract method 0x257a3aa3.
//
// Solidity: function targetRoundSubmissionsNext() view returns(uint256)
func (_DAEntrance *DAEntranceCaller) TargetRoundSubmissionsNext(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "targetRoundSubmissionsNext")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TargetRoundSubmissionsNext is a free data retrieval call binding the contract method 0x257a3aa3.
//
// Solidity: function targetRoundSubmissionsNext() view returns(uint256)
func (_DAEntrance *DAEntranceSession) TargetRoundSubmissionsNext() (*big.Int, error) {
	return _DAEntrance.Contract.TargetRoundSubmissionsNext(&_DAEntrance.CallOpts)
}

// TargetRoundSubmissionsNext is a free data retrieval call binding the contract method 0x257a3aa3.
//
// Solidity: function targetRoundSubmissionsNext() view returns(uint256)
func (_DAEntrance *DAEntranceCallerSession) TargetRoundSubmissionsNext() (*big.Int, error) {
	return _DAEntrance.Contract.TargetRoundSubmissionsNext(&_DAEntrance.CallOpts)
}

// TotalBaseReward is a free data retrieval call binding the contract method 0x7f1b5e43.
//
// Solidity: function totalBaseReward() view returns(uint256)
func (_DAEntrance *DAEntranceCaller) TotalBaseReward(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "totalBaseReward")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalBaseReward is a free data retrieval call binding the contract method 0x7f1b5e43.
//
// Solidity: function totalBaseReward() view returns(uint256)
func (_DAEntrance *DAEntranceSession) TotalBaseReward() (*big.Int, error) {
	return _DAEntrance.Contract.TotalBaseReward(&_DAEntrance.CallOpts)
}

// TotalBaseReward is a free data retrieval call binding the contract method 0x7f1b5e43.
//
// Solidity: function totalBaseReward() view returns(uint256)
func (_DAEntrance *DAEntranceCallerSession) TotalBaseReward() (*big.Int, error) {
	return _DAEntrance.Contract.TotalBaseReward(&_DAEntrance.CallOpts)
}

// Treasury is a free data retrieval call binding the contract method 0x61d027b3.
//
// Solidity: function treasury() view returns(address)
func (_DAEntrance *DAEntranceCaller) Treasury(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "treasury")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Treasury is a free data retrieval call binding the contract method 0x61d027b3.
//
// Solidity: function treasury() view returns(address)
func (_DAEntrance *DAEntranceSession) Treasury() (common.Address, error) {
	return _DAEntrance.Contract.Treasury(&_DAEntrance.CallOpts)
}

// Treasury is a free data retrieval call binding the contract method 0x61d027b3.
//
// Solidity: function treasury() view returns(address)
func (_DAEntrance *DAEntranceCallerSession) Treasury() (common.Address, error) {
	return _DAEntrance.Contract.Treasury(&_DAEntrance.CallOpts)
}

// VerifiedErasureCommitment is a free data retrieval call binding the contract method 0x9da3a69b.
//
// Solidity: function verifiedErasureCommitment(bytes32 _dataRoot, uint256 _epoch, uint256 _quorumId) view returns((uint256,uint256))
func (_DAEntrance *DAEntranceCaller) VerifiedErasureCommitment(opts *bind.CallOpts, _dataRoot [32]byte, _epoch *big.Int, _quorumId *big.Int) (BN254G1Point, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "verifiedErasureCommitment", _dataRoot, _epoch, _quorumId)

	if err != nil {
		return *new(BN254G1Point), err
	}

	out0 := *abi.ConvertType(out[0], new(BN254G1Point)).(*BN254G1Point)

	return out0, err

}

// VerifiedErasureCommitment is a free data retrieval call binding the contract method 0x9da3a69b.
//
// Solidity: function verifiedErasureCommitment(bytes32 _dataRoot, uint256 _epoch, uint256 _quorumId) view returns((uint256,uint256))
func (_DAEntrance *DAEntranceSession) VerifiedErasureCommitment(_dataRoot [32]byte, _epoch *big.Int, _quorumId *big.Int) (BN254G1Point, error) {
	return _DAEntrance.Contract.VerifiedErasureCommitment(&_DAEntrance.CallOpts, _dataRoot, _epoch, _quorumId)
}

// VerifiedErasureCommitment is a free data retrieval call binding the contract method 0x9da3a69b.
//
// Solidity: function verifiedErasureCommitment(bytes32 _dataRoot, uint256 _epoch, uint256 _quorumId) view returns((uint256,uint256))
func (_DAEntrance *DAEntranceCallerSession) VerifiedErasureCommitment(_dataRoot [32]byte, _epoch *big.Int, _quorumId *big.Int) (BN254G1Point, error) {
	return _DAEntrance.Contract.VerifiedErasureCommitment(&_DAEntrance.CallOpts, _dataRoot, _epoch, _quorumId)
}

// Donate is a paid mutator transaction binding the contract method 0xed88c68e.
//
// Solidity: function donate() payable returns()
func (_DAEntrance *DAEntranceTransactor) Donate(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DAEntrance.contract.Transact(opts, "donate")
}

// Donate is a paid mutator transaction binding the contract method 0xed88c68e.
//
// Solidity: function donate() payable returns()
func (_DAEntrance *DAEntranceSession) Donate() (*types.Transaction, error) {
	return _DAEntrance.Contract.Donate(&_DAEntrance.TransactOpts)
}

// Donate is a paid mutator transaction binding the contract method 0xed88c68e.
//
// Solidity: function donate() payable returns()
func (_DAEntrance *DAEntranceTransactorSession) Donate() (*types.Transaction, error) {
	return _DAEntrance.Contract.Donate(&_DAEntrance.TransactOpts)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_DAEntrance *DAEntranceTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _DAEntrance.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_DAEntrance *DAEntranceSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _DAEntrance.Contract.GrantRole(&_DAEntrance.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_DAEntrance *DAEntranceTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _DAEntrance.Contract.GrantRole(&_DAEntrance.TransactOpts, role, account)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_DAEntrance *DAEntranceTransactor) Initialize(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DAEntrance.contract.Transact(opts, "initialize")
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_DAEntrance *DAEntranceSession) Initialize() (*types.Transaction, error) {
	return _DAEntrance.Contract.Initialize(&_DAEntrance.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_DAEntrance *DAEntranceTransactorSession) Initialize() (*types.Transaction, error) {
	return _DAEntrance.Contract.Initialize(&_DAEntrance.TransactOpts)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_DAEntrance *DAEntranceTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _DAEntrance.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_DAEntrance *DAEntranceSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _DAEntrance.Contract.RenounceRole(&_DAEntrance.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_DAEntrance *DAEntranceTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _DAEntrance.Contract.RenounceRole(&_DAEntrance.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_DAEntrance *DAEntranceTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _DAEntrance.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_DAEntrance *DAEntranceSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _DAEntrance.Contract.RevokeRole(&_DAEntrance.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_DAEntrance *DAEntranceTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _DAEntrance.Contract.RevokeRole(&_DAEntrance.TransactOpts, role, account)
}

// SampleRange is a paid mutator transaction binding the contract method 0x6efc2555.
//
// Solidity: function sampleRange() returns((uint64,uint64))
func (_DAEntrance *DAEntranceTransactor) SampleRange(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DAEntrance.contract.Transact(opts, "sampleRange")
}

// SampleRange is a paid mutator transaction binding the contract method 0x6efc2555.
//
// Solidity: function sampleRange() returns((uint64,uint64))
func (_DAEntrance *DAEntranceSession) SampleRange() (*types.Transaction, error) {
	return _DAEntrance.Contract.SampleRange(&_DAEntrance.TransactOpts)
}

// SampleRange is a paid mutator transaction binding the contract method 0x6efc2555.
//
// Solidity: function sampleRange() returns((uint64,uint64))
func (_DAEntrance *DAEntranceTransactorSession) SampleRange() (*types.Transaction, error) {
	return _DAEntrance.Contract.SampleRange(&_DAEntrance.TransactOpts)
}

// SampleTask is a paid mutator transaction binding the contract method 0x988ea94e.
//
// Solidity: function sampleTask() returns((bytes32,uint256,uint64))
func (_DAEntrance *DAEntranceTransactor) SampleTask(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DAEntrance.contract.Transact(opts, "sampleTask")
}

// SampleTask is a paid mutator transaction binding the contract method 0x988ea94e.
//
// Solidity: function sampleTask() returns((bytes32,uint256,uint64))
func (_DAEntrance *DAEntranceSession) SampleTask() (*types.Transaction, error) {
	return _DAEntrance.Contract.SampleTask(&_DAEntrance.TransactOpts)
}

// SampleTask is a paid mutator transaction binding the contract method 0x988ea94e.
//
// Solidity: function sampleTask() returns((bytes32,uint256,uint64))
func (_DAEntrance *DAEntranceTransactorSession) SampleTask() (*types.Transaction, error) {
	return _DAEntrance.Contract.SampleTask(&_DAEntrance.TransactOpts)
}

// SetBaseReward is a paid mutator transaction binding the contract method 0x0373a23a.
//
// Solidity: function setBaseReward(uint256 _baseReward) returns()
func (_DAEntrance *DAEntranceTransactor) SetBaseReward(opts *bind.TransactOpts, _baseReward *big.Int) (*types.Transaction, error) {
	return _DAEntrance.contract.Transact(opts, "setBaseReward", _baseReward)
}

// SetBaseReward is a paid mutator transaction binding the contract method 0x0373a23a.
//
// Solidity: function setBaseReward(uint256 _baseReward) returns()
func (_DAEntrance *DAEntranceSession) SetBaseReward(_baseReward *big.Int) (*types.Transaction, error) {
	return _DAEntrance.Contract.SetBaseReward(&_DAEntrance.TransactOpts, _baseReward)
}

// SetBaseReward is a paid mutator transaction binding the contract method 0x0373a23a.
//
// Solidity: function setBaseReward(uint256 _baseReward) returns()
func (_DAEntrance *DAEntranceTransactorSession) SetBaseReward(_baseReward *big.Int) (*types.Transaction, error) {
	return _DAEntrance.Contract.SetBaseReward(&_DAEntrance.TransactOpts, _baseReward)
}

// SetBlobPrice is a paid mutator transaction binding the contract method 0x23dd60a6.
//
// Solidity: function setBlobPrice(uint256 _blobPrice) returns()
func (_DAEntrance *DAEntranceTransactor) SetBlobPrice(opts *bind.TransactOpts, _blobPrice *big.Int) (*types.Transaction, error) {
	return _DAEntrance.contract.Transact(opts, "setBlobPrice", _blobPrice)
}

// SetBlobPrice is a paid mutator transaction binding the contract method 0x23dd60a6.
//
// Solidity: function setBlobPrice(uint256 _blobPrice) returns()
func (_DAEntrance *DAEntranceSession) SetBlobPrice(_blobPrice *big.Int) (*types.Transaction, error) {
	return _DAEntrance.Contract.SetBlobPrice(&_DAEntrance.TransactOpts, _blobPrice)
}

// SetBlobPrice is a paid mutator transaction binding the contract method 0x23dd60a6.
//
// Solidity: function setBlobPrice(uint256 _blobPrice) returns()
func (_DAEntrance *DAEntranceTransactorSession) SetBlobPrice(_blobPrice *big.Int) (*types.Transaction, error) {
	return _DAEntrance.Contract.SetBlobPrice(&_DAEntrance.TransactOpts, _blobPrice)
}

// SetEpochWindowSize is a paid mutator transaction binding the contract method 0xb1be17ab.
//
// Solidity: function setEpochWindowSize(uint64 _epochWindowSize) returns()
func (_DAEntrance *DAEntranceTransactor) SetEpochWindowSize(opts *bind.TransactOpts, _epochWindowSize uint64) (*types.Transaction, error) {
	return _DAEntrance.contract.Transact(opts, "setEpochWindowSize", _epochWindowSize)
}

// SetEpochWindowSize is a paid mutator transaction binding the contract method 0xb1be17ab.
//
// Solidity: function setEpochWindowSize(uint64 _epochWindowSize) returns()
func (_DAEntrance *DAEntranceSession) SetEpochWindowSize(_epochWindowSize uint64) (*types.Transaction, error) {
	return _DAEntrance.Contract.SetEpochWindowSize(&_DAEntrance.TransactOpts, _epochWindowSize)
}

// SetEpochWindowSize is a paid mutator transaction binding the contract method 0xb1be17ab.
//
// Solidity: function setEpochWindowSize(uint64 _epochWindowSize) returns()
func (_DAEntrance *DAEntranceTransactorSession) SetEpochWindowSize(_epochWindowSize uint64) (*types.Transaction, error) {
	return _DAEntrance.Contract.SetEpochWindowSize(&_DAEntrance.TransactOpts, _epochWindowSize)
}

// SetRewardRatio is a paid mutator transaction binding the contract method 0x3bab2a70.
//
// Solidity: function setRewardRatio(uint64 _rewardRatio) returns()
func (_DAEntrance *DAEntranceTransactor) SetRewardRatio(opts *bind.TransactOpts, _rewardRatio uint64) (*types.Transaction, error) {
	return _DAEntrance.contract.Transact(opts, "setRewardRatio", _rewardRatio)
}

// SetRewardRatio is a paid mutator transaction binding the contract method 0x3bab2a70.
//
// Solidity: function setRewardRatio(uint64 _rewardRatio) returns()
func (_DAEntrance *DAEntranceSession) SetRewardRatio(_rewardRatio uint64) (*types.Transaction, error) {
	return _DAEntrance.Contract.SetRewardRatio(&_DAEntrance.TransactOpts, _rewardRatio)
}

// SetRewardRatio is a paid mutator transaction binding the contract method 0x3bab2a70.
//
// Solidity: function setRewardRatio(uint64 _rewardRatio) returns()
func (_DAEntrance *DAEntranceTransactorSession) SetRewardRatio(_rewardRatio uint64) (*types.Transaction, error) {
	return _DAEntrance.Contract.SetRewardRatio(&_DAEntrance.TransactOpts, _rewardRatio)
}

// SetRoundSubmissions is a paid mutator transaction binding the contract method 0x88521ec7.
//
// Solidity: function setRoundSubmissions(uint64 _targetRoundSubmissions) returns()
func (_DAEntrance *DAEntranceTransactor) SetRoundSubmissions(opts *bind.TransactOpts, _targetRoundSubmissions uint64) (*types.Transaction, error) {
	return _DAEntrance.contract.Transact(opts, "setRoundSubmissions", _targetRoundSubmissions)
}

// SetRoundSubmissions is a paid mutator transaction binding the contract method 0x88521ec7.
//
// Solidity: function setRoundSubmissions(uint64 _targetRoundSubmissions) returns()
func (_DAEntrance *DAEntranceSession) SetRoundSubmissions(_targetRoundSubmissions uint64) (*types.Transaction, error) {
	return _DAEntrance.Contract.SetRoundSubmissions(&_DAEntrance.TransactOpts, _targetRoundSubmissions)
}

// SetRoundSubmissions is a paid mutator transaction binding the contract method 0x88521ec7.
//
// Solidity: function setRoundSubmissions(uint64 _targetRoundSubmissions) returns()
func (_DAEntrance *DAEntranceTransactorSession) SetRoundSubmissions(_targetRoundSubmissions uint64) (*types.Transaction, error) {
	return _DAEntrance.Contract.SetRoundSubmissions(&_DAEntrance.TransactOpts, _targetRoundSubmissions)
}

// SetSamplePeriod is a paid mutator transaction binding the contract method 0x1192de9a.
//
// Solidity: function setSamplePeriod(uint64 samplePeriod_) returns()
func (_DAEntrance *DAEntranceTransactor) SetSamplePeriod(opts *bind.TransactOpts, samplePeriod_ uint64) (*types.Transaction, error) {
	return _DAEntrance.contract.Transact(opts, "setSamplePeriod", samplePeriod_)
}

// SetSamplePeriod is a paid mutator transaction binding the contract method 0x1192de9a.
//
// Solidity: function setSamplePeriod(uint64 samplePeriod_) returns()
func (_DAEntrance *DAEntranceSession) SetSamplePeriod(samplePeriod_ uint64) (*types.Transaction, error) {
	return _DAEntrance.Contract.SetSamplePeriod(&_DAEntrance.TransactOpts, samplePeriod_)
}

// SetSamplePeriod is a paid mutator transaction binding the contract method 0x1192de9a.
//
// Solidity: function setSamplePeriod(uint64 samplePeriod_) returns()
func (_DAEntrance *DAEntranceTransactorSession) SetSamplePeriod(samplePeriod_ uint64) (*types.Transaction, error) {
	return _DAEntrance.Contract.SetSamplePeriod(&_DAEntrance.TransactOpts, samplePeriod_)
}

// SetServiceFeeRate is a paid mutator transaction binding the contract method 0x9b1d3091.
//
// Solidity: function setServiceFeeRate(uint256 bps) returns()
func (_DAEntrance *DAEntranceTransactor) SetServiceFeeRate(opts *bind.TransactOpts, bps *big.Int) (*types.Transaction, error) {
	return _DAEntrance.contract.Transact(opts, "setServiceFeeRate", bps)
}

// SetServiceFeeRate is a paid mutator transaction binding the contract method 0x9b1d3091.
//
// Solidity: function setServiceFeeRate(uint256 bps) returns()
func (_DAEntrance *DAEntranceSession) SetServiceFeeRate(bps *big.Int) (*types.Transaction, error) {
	return _DAEntrance.Contract.SetServiceFeeRate(&_DAEntrance.TransactOpts, bps)
}

// SetServiceFeeRate is a paid mutator transaction binding the contract method 0x9b1d3091.
//
// Solidity: function setServiceFeeRate(uint256 bps) returns()
func (_DAEntrance *DAEntranceTransactorSession) SetServiceFeeRate(bps *big.Int) (*types.Transaction, error) {
	return _DAEntrance.Contract.SetServiceFeeRate(&_DAEntrance.TransactOpts, bps)
}

// SetTreasury is a paid mutator transaction binding the contract method 0xf0f44260.
//
// Solidity: function setTreasury(address treasury_) returns()
func (_DAEntrance *DAEntranceTransactor) SetTreasury(opts *bind.TransactOpts, treasury_ common.Address) (*types.Transaction, error) {
	return _DAEntrance.contract.Transact(opts, "setTreasury", treasury_)
}

// SetTreasury is a paid mutator transaction binding the contract method 0xf0f44260.
//
// Solidity: function setTreasury(address treasury_) returns()
func (_DAEntrance *DAEntranceSession) SetTreasury(treasury_ common.Address) (*types.Transaction, error) {
	return _DAEntrance.Contract.SetTreasury(&_DAEntrance.TransactOpts, treasury_)
}

// SetTreasury is a paid mutator transaction binding the contract method 0xf0f44260.
//
// Solidity: function setTreasury(address treasury_) returns()
func (_DAEntrance *DAEntranceTransactorSession) SetTreasury(treasury_ common.Address) (*types.Transaction, error) {
	return _DAEntrance.Contract.SetTreasury(&_DAEntrance.TransactOpts, treasury_)
}

// SubmitOriginalData is a paid mutator transaction binding the contract method 0xd4ae59c9.
//
// Solidity: function submitOriginalData(bytes32[] _dataRoots) payable returns()
func (_DAEntrance *DAEntranceTransactor) SubmitOriginalData(opts *bind.TransactOpts, _dataRoots [][32]byte) (*types.Transaction, error) {
	return _DAEntrance.contract.Transact(opts, "submitOriginalData", _dataRoots)
}

// SubmitOriginalData is a paid mutator transaction binding the contract method 0xd4ae59c9.
//
// Solidity: function submitOriginalData(bytes32[] _dataRoots) payable returns()
func (_DAEntrance *DAEntranceSession) SubmitOriginalData(_dataRoots [][32]byte) (*types.Transaction, error) {
	return _DAEntrance.Contract.SubmitOriginalData(&_DAEntrance.TransactOpts, _dataRoots)
}

// SubmitOriginalData is a paid mutator transaction binding the contract method 0xd4ae59c9.
//
// Solidity: function submitOriginalData(bytes32[] _dataRoots) payable returns()
func (_DAEntrance *DAEntranceTransactorSession) SubmitOriginalData(_dataRoots [][32]byte) (*types.Transaction, error) {
	return _DAEntrance.Contract.SubmitOriginalData(&_DAEntrance.TransactOpts, _dataRoots)
}

// SubmitSamplingResponse is a paid mutator transaction binding the contract method 0xf6902775.
//
// Solidity: function submitSamplingResponse((bytes32,uint64,uint64,uint32,uint32,uint256,bytes32,bytes32[3],bytes32[],bytes) rep) returns()
func (_DAEntrance *DAEntranceTransactor) SubmitSamplingResponse(opts *bind.TransactOpts, rep SampleResponse) (*types.Transaction, error) {
	return _DAEntrance.contract.Transact(opts, "submitSamplingResponse", rep)
}

// SubmitSamplingResponse is a paid mutator transaction binding the contract method 0xf6902775.
//
// Solidity: function submitSamplingResponse((bytes32,uint64,uint64,uint32,uint32,uint256,bytes32,bytes32[3],bytes32[],bytes) rep) returns()
func (_DAEntrance *DAEntranceSession) SubmitSamplingResponse(rep SampleResponse) (*types.Transaction, error) {
	return _DAEntrance.Contract.SubmitSamplingResponse(&_DAEntrance.TransactOpts, rep)
}

// SubmitSamplingResponse is a paid mutator transaction binding the contract method 0xf6902775.
//
// Solidity: function submitSamplingResponse((bytes32,uint64,uint64,uint32,uint32,uint256,bytes32,bytes32[3],bytes32[],bytes) rep) returns()
func (_DAEntrance *DAEntranceTransactorSession) SubmitSamplingResponse(rep SampleResponse) (*types.Transaction, error) {
	return _DAEntrance.Contract.SubmitSamplingResponse(&_DAEntrance.TransactOpts, rep)
}

// SubmitVerifiedCommitRoots is a paid mutator transaction binding the contract method 0xeafed6ce.
//
// Solidity: function submitVerifiedCommitRoots((bytes32,uint256,uint256,(uint256,uint256),bytes,(uint256[2],uint256[2]),(uint256,uint256))[] _submissions) returns()
func (_DAEntrance *DAEntranceTransactor) SubmitVerifiedCommitRoots(opts *bind.TransactOpts, _submissions []IDAEntranceCommitRootSubmission) (*types.Transaction, error) {
	return _DAEntrance.contract.Transact(opts, "submitVerifiedCommitRoots", _submissions)
}

// SubmitVerifiedCommitRoots is a paid mutator transaction binding the contract method 0xeafed6ce.
//
// Solidity: function submitVerifiedCommitRoots((bytes32,uint256,uint256,(uint256,uint256),bytes,(uint256[2],uint256[2]),(uint256,uint256))[] _submissions) returns()
func (_DAEntrance *DAEntranceSession) SubmitVerifiedCommitRoots(_submissions []IDAEntranceCommitRootSubmission) (*types.Transaction, error) {
	return _DAEntrance.Contract.SubmitVerifiedCommitRoots(&_DAEntrance.TransactOpts, _submissions)
}

// SubmitVerifiedCommitRoots is a paid mutator transaction binding the contract method 0xeafed6ce.
//
// Solidity: function submitVerifiedCommitRoots((bytes32,uint256,uint256,(uint256,uint256),bytes,(uint256[2],uint256[2]),(uint256,uint256))[] _submissions) returns()
func (_DAEntrance *DAEntranceTransactorSession) SubmitVerifiedCommitRoots(_submissions []IDAEntranceCommitRootSubmission) (*types.Transaction, error) {
	return _DAEntrance.Contract.SubmitVerifiedCommitRoots(&_DAEntrance.TransactOpts, _submissions)
}

// Sync is a paid mutator transaction binding the contract method 0xfff6cae9.
//
// Solidity: function sync() returns()
func (_DAEntrance *DAEntranceTransactor) Sync(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DAEntrance.contract.Transact(opts, "sync")
}

// Sync is a paid mutator transaction binding the contract method 0xfff6cae9.
//
// Solidity: function sync() returns()
func (_DAEntrance *DAEntranceSession) Sync() (*types.Transaction, error) {
	return _DAEntrance.Contract.Sync(&_DAEntrance.TransactOpts)
}

// Sync is a paid mutator transaction binding the contract method 0xfff6cae9.
//
// Solidity: function sync() returns()
func (_DAEntrance *DAEntranceTransactorSession) Sync() (*types.Transaction, error) {
	return _DAEntrance.Contract.Sync(&_DAEntrance.TransactOpts)
}

// SyncFixedTimes is a paid mutator transaction binding the contract method 0xe051d1ea.
//
// Solidity: function syncFixedTimes(uint256 _times) returns()
func (_DAEntrance *DAEntranceTransactor) SyncFixedTimes(opts *bind.TransactOpts, _times *big.Int) (*types.Transaction, error) {
	return _DAEntrance.contract.Transact(opts, "syncFixedTimes", _times)
}

// SyncFixedTimes is a paid mutator transaction binding the contract method 0xe051d1ea.
//
// Solidity: function syncFixedTimes(uint256 _times) returns()
func (_DAEntrance *DAEntranceSession) SyncFixedTimes(_times *big.Int) (*types.Transaction, error) {
	return _DAEntrance.Contract.SyncFixedTimes(&_DAEntrance.TransactOpts, _times)
}

// SyncFixedTimes is a paid mutator transaction binding the contract method 0xe051d1ea.
//
// Solidity: function syncFixedTimes(uint256 _times) returns()
func (_DAEntrance *DAEntranceTransactorSession) SyncFixedTimes(_times *big.Int) (*types.Transaction, error) {
	return _DAEntrance.Contract.SyncFixedTimes(&_DAEntrance.TransactOpts, _times)
}

// WithdrawPayments is a paid mutator transaction binding the contract method 0x31b3eb94.
//
// Solidity: function withdrawPayments(address payee) returns()
func (_DAEntrance *DAEntranceTransactor) WithdrawPayments(opts *bind.TransactOpts, payee common.Address) (*types.Transaction, error) {
	return _DAEntrance.contract.Transact(opts, "withdrawPayments", payee)
}

// WithdrawPayments is a paid mutator transaction binding the contract method 0x31b3eb94.
//
// Solidity: function withdrawPayments(address payee) returns()
func (_DAEntrance *DAEntranceSession) WithdrawPayments(payee common.Address) (*types.Transaction, error) {
	return _DAEntrance.Contract.WithdrawPayments(&_DAEntrance.TransactOpts, payee)
}

// WithdrawPayments is a paid mutator transaction binding the contract method 0x31b3eb94.
//
// Solidity: function withdrawPayments(address payee) returns()
func (_DAEntrance *DAEntranceTransactorSession) WithdrawPayments(payee common.Address) (*types.Transaction, error) {
	return _DAEntrance.Contract.WithdrawPayments(&_DAEntrance.TransactOpts, payee)
}

// DAEntranceDARewardIterator is returned from FilterDAReward and is used to iterate over the raw logs and unpacked data for DAReward events raised by the DAEntrance contract.
type DAEntranceDARewardIterator struct {
	Event *DAEntranceDAReward // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DAEntranceDARewardIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DAEntranceDAReward)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DAEntranceDAReward)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DAEntranceDARewardIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DAEntranceDARewardIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DAEntranceDAReward represents a DAReward event raised by the DAEntrance contract.
type DAEntranceDAReward struct {
	Beneficiary  common.Address
	SampleRound  *big.Int
	Epoch        *big.Int
	QuorumId     *big.Int
	DataRoot     [32]byte
	Quality      *big.Int
	LineIndex    *big.Int
	SublineIndex *big.Int
	Reward       *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterDAReward is a free log retrieval operation binding the contract event 0xc3898eb7106c1cb2f727da316a76320c0035f5692950aa7f6b65d20a5efaedc5.
//
// Solidity: event DAReward(address indexed beneficiary, uint256 indexed sampleRound, uint256 indexed epoch, uint256 quorumId, bytes32 dataRoot, uint256 quality, uint256 lineIndex, uint256 sublineIndex, uint256 reward)
func (_DAEntrance *DAEntranceFilterer) FilterDAReward(opts *bind.FilterOpts, beneficiary []common.Address, sampleRound []*big.Int, epoch []*big.Int) (*DAEntranceDARewardIterator, error) {

	var beneficiaryRule []interface{}
	for _, beneficiaryItem := range beneficiary {
		beneficiaryRule = append(beneficiaryRule, beneficiaryItem)
	}
	var sampleRoundRule []interface{}
	for _, sampleRoundItem := range sampleRound {
		sampleRoundRule = append(sampleRoundRule, sampleRoundItem)
	}
	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	logs, sub, err := _DAEntrance.contract.FilterLogs(opts, "DAReward", beneficiaryRule, sampleRoundRule, epochRule)
	if err != nil {
		return nil, err
	}
	return &DAEntranceDARewardIterator{contract: _DAEntrance.contract, event: "DAReward", logs: logs, sub: sub}, nil
}

// WatchDAReward is a free log subscription operation binding the contract event 0xc3898eb7106c1cb2f727da316a76320c0035f5692950aa7f6b65d20a5efaedc5.
//
// Solidity: event DAReward(address indexed beneficiary, uint256 indexed sampleRound, uint256 indexed epoch, uint256 quorumId, bytes32 dataRoot, uint256 quality, uint256 lineIndex, uint256 sublineIndex, uint256 reward)
func (_DAEntrance *DAEntranceFilterer) WatchDAReward(opts *bind.WatchOpts, sink chan<- *DAEntranceDAReward, beneficiary []common.Address, sampleRound []*big.Int, epoch []*big.Int) (event.Subscription, error) {

	var beneficiaryRule []interface{}
	for _, beneficiaryItem := range beneficiary {
		beneficiaryRule = append(beneficiaryRule, beneficiaryItem)
	}
	var sampleRoundRule []interface{}
	for _, sampleRoundItem := range sampleRound {
		sampleRoundRule = append(sampleRoundRule, sampleRoundItem)
	}
	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	logs, sub, err := _DAEntrance.contract.WatchLogs(opts, "DAReward", beneficiaryRule, sampleRoundRule, epochRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DAEntranceDAReward)
				if err := _DAEntrance.contract.UnpackLog(event, "DAReward", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDAReward is a log parse operation binding the contract event 0xc3898eb7106c1cb2f727da316a76320c0035f5692950aa7f6b65d20a5efaedc5.
//
// Solidity: event DAReward(address indexed beneficiary, uint256 indexed sampleRound, uint256 indexed epoch, uint256 quorumId, bytes32 dataRoot, uint256 quality, uint256 lineIndex, uint256 sublineIndex, uint256 reward)
func (_DAEntrance *DAEntranceFilterer) ParseDAReward(log types.Log) (*DAEntranceDAReward, error) {
	event := new(DAEntranceDAReward)
	if err := _DAEntrance.contract.UnpackLog(event, "DAReward", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DAEntranceDataUploadIterator is returned from FilterDataUpload and is used to iterate over the raw logs and unpacked data for DataUpload events raised by the DAEntrance contract.
type DAEntranceDataUploadIterator struct {
	Event *DAEntranceDataUpload // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DAEntranceDataUploadIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DAEntranceDataUpload)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DAEntranceDataUpload)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DAEntranceDataUploadIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DAEntranceDataUploadIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DAEntranceDataUpload represents a DataUpload event raised by the DAEntrance contract.
type DAEntranceDataUpload struct {
	Sender    common.Address
	DataRoot  [32]byte
	Epoch     *big.Int
	QuorumId  *big.Int
	BlobPrice *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterDataUpload is a free log retrieval operation binding the contract event 0x57b8b1a6583dc6ce934dfba3d66f2a8e1591b6e171bb2e0921cc64640277087b.
//
// Solidity: event DataUpload(address sender, bytes32 dataRoot, uint256 epoch, uint256 quorumId, uint256 blobPrice)
func (_DAEntrance *DAEntranceFilterer) FilterDataUpload(opts *bind.FilterOpts) (*DAEntranceDataUploadIterator, error) {

	logs, sub, err := _DAEntrance.contract.FilterLogs(opts, "DataUpload")
	if err != nil {
		return nil, err
	}
	return &DAEntranceDataUploadIterator{contract: _DAEntrance.contract, event: "DataUpload", logs: logs, sub: sub}, nil
}

// WatchDataUpload is a free log subscription operation binding the contract event 0x57b8b1a6583dc6ce934dfba3d66f2a8e1591b6e171bb2e0921cc64640277087b.
//
// Solidity: event DataUpload(address sender, bytes32 dataRoot, uint256 epoch, uint256 quorumId, uint256 blobPrice)
func (_DAEntrance *DAEntranceFilterer) WatchDataUpload(opts *bind.WatchOpts, sink chan<- *DAEntranceDataUpload) (event.Subscription, error) {

	logs, sub, err := _DAEntrance.contract.WatchLogs(opts, "DataUpload")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DAEntranceDataUpload)
				if err := _DAEntrance.contract.UnpackLog(event, "DataUpload", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDataUpload is a log parse operation binding the contract event 0x57b8b1a6583dc6ce934dfba3d66f2a8e1591b6e171bb2e0921cc64640277087b.
//
// Solidity: event DataUpload(address sender, bytes32 dataRoot, uint256 epoch, uint256 quorumId, uint256 blobPrice)
func (_DAEntrance *DAEntranceFilterer) ParseDataUpload(log types.Log) (*DAEntranceDataUpload, error) {
	event := new(DAEntranceDataUpload)
	if err := _DAEntrance.contract.UnpackLog(event, "DataUpload", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DAEntranceErasureCommitmentVerifiedIterator is returned from FilterErasureCommitmentVerified and is used to iterate over the raw logs and unpacked data for ErasureCommitmentVerified events raised by the DAEntrance contract.
type DAEntranceErasureCommitmentVerifiedIterator struct {
	Event *DAEntranceErasureCommitmentVerified // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DAEntranceErasureCommitmentVerifiedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DAEntranceErasureCommitmentVerified)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DAEntranceErasureCommitmentVerified)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DAEntranceErasureCommitmentVerifiedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DAEntranceErasureCommitmentVerifiedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DAEntranceErasureCommitmentVerified represents a ErasureCommitmentVerified event raised by the DAEntrance contract.
type DAEntranceErasureCommitmentVerified struct {
	DataRoot [32]byte
	Epoch    *big.Int
	QuorumId *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterErasureCommitmentVerified is a free log retrieval operation binding the contract event 0x0f1b20d87bebd11dddaaab51f01cf2726880cb3f8073b636dbafa2aa8cacd256.
//
// Solidity: event ErasureCommitmentVerified(bytes32 dataRoot, uint256 epoch, uint256 quorumId)
func (_DAEntrance *DAEntranceFilterer) FilterErasureCommitmentVerified(opts *bind.FilterOpts) (*DAEntranceErasureCommitmentVerifiedIterator, error) {

	logs, sub, err := _DAEntrance.contract.FilterLogs(opts, "ErasureCommitmentVerified")
	if err != nil {
		return nil, err
	}
	return &DAEntranceErasureCommitmentVerifiedIterator{contract: _DAEntrance.contract, event: "ErasureCommitmentVerified", logs: logs, sub: sub}, nil
}

// WatchErasureCommitmentVerified is a free log subscription operation binding the contract event 0x0f1b20d87bebd11dddaaab51f01cf2726880cb3f8073b636dbafa2aa8cacd256.
//
// Solidity: event ErasureCommitmentVerified(bytes32 dataRoot, uint256 epoch, uint256 quorumId)
func (_DAEntrance *DAEntranceFilterer) WatchErasureCommitmentVerified(opts *bind.WatchOpts, sink chan<- *DAEntranceErasureCommitmentVerified) (event.Subscription, error) {

	logs, sub, err := _DAEntrance.contract.WatchLogs(opts, "ErasureCommitmentVerified")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DAEntranceErasureCommitmentVerified)
				if err := _DAEntrance.contract.UnpackLog(event, "ErasureCommitmentVerified", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseErasureCommitmentVerified is a log parse operation binding the contract event 0x0f1b20d87bebd11dddaaab51f01cf2726880cb3f8073b636dbafa2aa8cacd256.
//
// Solidity: event ErasureCommitmentVerified(bytes32 dataRoot, uint256 epoch, uint256 quorumId)
func (_DAEntrance *DAEntranceFilterer) ParseErasureCommitmentVerified(log types.Log) (*DAEntranceErasureCommitmentVerified, error) {
	event := new(DAEntranceErasureCommitmentVerified)
	if err := _DAEntrance.contract.UnpackLog(event, "ErasureCommitmentVerified", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DAEntranceNewSampleRoundIterator is returned from FilterNewSampleRound and is used to iterate over the raw logs and unpacked data for NewSampleRound events raised by the DAEntrance contract.
type DAEntranceNewSampleRoundIterator struct {
	Event *DAEntranceNewSampleRound // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DAEntranceNewSampleRoundIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DAEntranceNewSampleRound)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DAEntranceNewSampleRound)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DAEntranceNewSampleRoundIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DAEntranceNewSampleRoundIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DAEntranceNewSampleRound represents a NewSampleRound event raised by the DAEntrance contract.
type DAEntranceNewSampleRound struct {
	SampleRound  *big.Int
	SampleHeight *big.Int
	SampleSeed   [32]byte
	PodasTarget  *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterNewSampleRound is a free log retrieval operation binding the contract event 0xdfb5db5886e81f083727f21152a2a83457e99364e9f104e1aa10bbd6d9b4b95f.
//
// Solidity: event NewSampleRound(uint256 indexed sampleRound, uint256 sampleHeight, bytes32 sampleSeed, uint256 podasTarget)
func (_DAEntrance *DAEntranceFilterer) FilterNewSampleRound(opts *bind.FilterOpts, sampleRound []*big.Int) (*DAEntranceNewSampleRoundIterator, error) {

	var sampleRoundRule []interface{}
	for _, sampleRoundItem := range sampleRound {
		sampleRoundRule = append(sampleRoundRule, sampleRoundItem)
	}

	logs, sub, err := _DAEntrance.contract.FilterLogs(opts, "NewSampleRound", sampleRoundRule)
	if err != nil {
		return nil, err
	}
	return &DAEntranceNewSampleRoundIterator{contract: _DAEntrance.contract, event: "NewSampleRound", logs: logs, sub: sub}, nil
}

// WatchNewSampleRound is a free log subscription operation binding the contract event 0xdfb5db5886e81f083727f21152a2a83457e99364e9f104e1aa10bbd6d9b4b95f.
//
// Solidity: event NewSampleRound(uint256 indexed sampleRound, uint256 sampleHeight, bytes32 sampleSeed, uint256 podasTarget)
func (_DAEntrance *DAEntranceFilterer) WatchNewSampleRound(opts *bind.WatchOpts, sink chan<- *DAEntranceNewSampleRound, sampleRound []*big.Int) (event.Subscription, error) {

	var sampleRoundRule []interface{}
	for _, sampleRoundItem := range sampleRound {
		sampleRoundRule = append(sampleRoundRule, sampleRoundItem)
	}

	logs, sub, err := _DAEntrance.contract.WatchLogs(opts, "NewSampleRound", sampleRoundRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DAEntranceNewSampleRound)
				if err := _DAEntrance.contract.UnpackLog(event, "NewSampleRound", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewSampleRound is a log parse operation binding the contract event 0xdfb5db5886e81f083727f21152a2a83457e99364e9f104e1aa10bbd6d9b4b95f.
//
// Solidity: event NewSampleRound(uint256 indexed sampleRound, uint256 sampleHeight, bytes32 sampleSeed, uint256 podasTarget)
func (_DAEntrance *DAEntranceFilterer) ParseNewSampleRound(log types.Log) (*DAEntranceNewSampleRound, error) {
	event := new(DAEntranceNewSampleRound)
	if err := _DAEntrance.contract.UnpackLog(event, "NewSampleRound", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DAEntranceRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the DAEntrance contract.
type DAEntranceRoleAdminChangedIterator struct {
	Event *DAEntranceRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DAEntranceRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DAEntranceRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DAEntranceRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DAEntranceRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DAEntranceRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DAEntranceRoleAdminChanged represents a RoleAdminChanged event raised by the DAEntrance contract.
type DAEntranceRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_DAEntrance *DAEntranceFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*DAEntranceRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _DAEntrance.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &DAEntranceRoleAdminChangedIterator{contract: _DAEntrance.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_DAEntrance *DAEntranceFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *DAEntranceRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _DAEntrance.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DAEntranceRoleAdminChanged)
				if err := _DAEntrance.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_DAEntrance *DAEntranceFilterer) ParseRoleAdminChanged(log types.Log) (*DAEntranceRoleAdminChanged, error) {
	event := new(DAEntranceRoleAdminChanged)
	if err := _DAEntrance.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DAEntranceRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the DAEntrance contract.
type DAEntranceRoleGrantedIterator struct {
	Event *DAEntranceRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DAEntranceRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DAEntranceRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DAEntranceRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DAEntranceRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DAEntranceRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DAEntranceRoleGranted represents a RoleGranted event raised by the DAEntrance contract.
type DAEntranceRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_DAEntrance *DAEntranceFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*DAEntranceRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _DAEntrance.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &DAEntranceRoleGrantedIterator{contract: _DAEntrance.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_DAEntrance *DAEntranceFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *DAEntranceRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _DAEntrance.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DAEntranceRoleGranted)
				if err := _DAEntrance.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_DAEntrance *DAEntranceFilterer) ParseRoleGranted(log types.Log) (*DAEntranceRoleGranted, error) {
	event := new(DAEntranceRoleGranted)
	if err := _DAEntrance.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DAEntranceRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the DAEntrance contract.
type DAEntranceRoleRevokedIterator struct {
	Event *DAEntranceRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DAEntranceRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DAEntranceRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DAEntranceRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DAEntranceRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DAEntranceRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DAEntranceRoleRevoked represents a RoleRevoked event raised by the DAEntrance contract.
type DAEntranceRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_DAEntrance *DAEntranceFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*DAEntranceRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _DAEntrance.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &DAEntranceRoleRevokedIterator{contract: _DAEntrance.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_DAEntrance *DAEntranceFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *DAEntranceRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _DAEntrance.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DAEntranceRoleRevoked)
				if err := _DAEntrance.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_DAEntrance *DAEntranceFilterer) ParseRoleRevoked(log types.Log) (*DAEntranceRoleRevoked, error) {
	event := new(DAEntranceRoleRevoked)
	if err := _DAEntrance.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
