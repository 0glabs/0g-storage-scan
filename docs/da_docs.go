// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplateda = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/rewards": {
            "get": {
                "description": "Query DA rewards",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reward"
                ],
                "summary": "DA reward list",
                "parameters": [
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "The number of skipped records, usually it's pageSize * (pageNumber - 1)",
                        "name": "skip",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "The number of records displayed on the page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/api.BusinessError"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "Data": {
                                            "$ref": "#/definitions/da.RewardList"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "600": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/api.BusinessError"
                        }
                    }
                }
            }
        },
        "/stats/client": {
            "get": {
                "description": "Query DA client statistics, including incremental, active and full data, and support querying at hourly or daily time intervals",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "statistic"
                ],
                "summary": "DA client statistics",
                "parameters": [
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "The number of skipped records, usually it's pageSize * (pageNumber - 1)",
                        "name": "skip",
                        "in": "query"
                    },
                    {
                        "maximum": 2000,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "The number of records displayed on the page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Timestamp in seconds",
                        "name": "minTimestamp",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Timestamp in seconds",
                        "name": "maxTimestamp",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "hour",
                            "day"
                        ],
                        "type": "string",
                        "default": "day",
                        "description": "Statistics interval",
                        "name": "intervalType",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "description": "Sort by timestamp",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/api.BusinessError"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "Data": {
                                            "$ref": "#/definitions/da.DAClientStatList"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "600": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/api.BusinessError"
                        }
                    }
                }
            }
        },
        "/stats/signer": {
            "get": {
                "description": "Query DA signer statistics, including incremental, active and full data, and support querying at hourly or daily time intervals",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "statistic"
                ],
                "summary": "DA signer statistics",
                "parameters": [
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "The number of skipped records, usually it's pageSize * (pageNumber - 1)",
                        "name": "skip",
                        "in": "query"
                    },
                    {
                        "maximum": 2000,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "The number of records displayed on the page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Timestamp in seconds",
                        "name": "minTimestamp",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Timestamp in seconds",
                        "name": "maxTimestamp",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "hour",
                            "day"
                        ],
                        "type": "string",
                        "default": "day",
                        "description": "Statistics interval",
                        "name": "intervalType",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "description": "Sort by timestamp",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/api.BusinessError"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "Data": {
                                            "$ref": "#/definitions/da.DASignerStatList"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "600": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/api.BusinessError"
                        }
                    }
                }
            }
        },
        "/stats/storage": {
            "get": {
                "description": "Query DA data storage statistics, including incremental and full data, and support querying at hourly or daily time intervals",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "statistic"
                ],
                "summary": "DA data storage statistics",
                "parameters": [
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "The number of skipped records, usually it's pageSize * (pageNumber - 1)",
                        "name": "skip",
                        "in": "query"
                    },
                    {
                        "maximum": 2000,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "The number of records displayed on the page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Timestamp in seconds",
                        "name": "minTimestamp",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Timestamp in seconds",
                        "name": "maxTimestamp",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "hour",
                            "day"
                        ],
                        "type": "string",
                        "default": "day",
                        "description": "Statistics interval",
                        "name": "intervalType",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "description": "Sort by timestamp",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/api.BusinessError"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "Data": {
                                            "$ref": "#/definitions/da.DADataStatList"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "600": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/api.BusinessError"
                        }
                    }
                }
            }
        },
        "/txs": {
            "get": {
                "description": "Query DA transactions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transaction"
                ],
                "summary": "DA transaction list",
                "parameters": [
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "The number of skipped records, usually it's pageSize * (pageNumber - 1)",
                        "name": "skip",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "The number of records displayed on the page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The merkle root hash of the uploaded file",
                        "name": "rootHash",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The layer1 tx hash of the submission",
                        "name": "txHash",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/api.BusinessError"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "Data": {
                                            "$ref": "#/definitions/da.DATxList"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "600": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/api.BusinessError"
                        }
                    }
                }
            }
        },
        "/txs/{blockNumber}/{epoch}/{quorumID}/{dataRoot}": {
            "get": {
                "description": "Query DA transaction by blockNumber, epoch, quorumId, dataRoot",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transaction"
                ],
                "summary": "DA transaction information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Block number at which the file is uploaded",
                        "name": "blockNumber",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The consecutive blocks in 0g chain is divided into groups of EpochBlocks and each group is an epoch",
                        "name": "epoch",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Quorum id in an epoch",
                        "name": "quorumID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Data root",
                        "name": "dataRoot",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/api.BusinessError"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "Data": {
                                            "$ref": "#/definitions/da.DATxInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "600": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/api.BusinessError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.BusinessError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {},
                "message": {
                    "type": "string"
                }
            }
        },
        "da.DAClientStat": {
            "description": "DA client information",
            "type": "object",
            "properties": {
                "clientActive": {
                    "description": "Number of active da client in a specific time interval",
                    "type": "integer"
                },
                "clientNew": {
                    "description": "Number of da client in a specific time interval",
                    "type": "integer"
                },
                "clientTotal": {
                    "description": "Total number of da client by a certain time",
                    "type": "integer"
                },
                "statTime": {
                    "description": "Statistics time",
                    "type": "string"
                }
            }
        },
        "da.DAClientStatList": {
            "description": "DA client stat list",
            "type": "object",
            "properties": {
                "list": {
                    "description": "Stat list",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/da.DAClientStat"
                    }
                },
                "total": {
                    "description": "The total number of stat returned",
                    "type": "integer"
                }
            }
        },
        "da.DADataStat": {
            "description": "DA storage data information",
            "type": "object",
            "properties": {
                "blobNew": {
                    "description": "Number of blobs in a specific time interval",
                    "type": "integer"
                },
                "blobTotal": {
                    "description": "Total number of blobs by a certain time",
                    "type": "integer"
                },
                "dataSizeNew": {
                    "description": "Size of storage data in a specific time interval",
                    "type": "integer"
                },
                "dataSizeTotal": {
                    "description": "Total size of storage data by a certain time",
                    "type": "integer"
                },
                "statTime": {
                    "description": "Statistics time",
                    "type": "string"
                },
                "storageFeeNew": {
                    "description": "Storage fee in a specific time interval",
                    "type": "number"
                },
                "storageFeeTotal": {
                    "description": "Total storage fee by a certain time",
                    "type": "number"
                }
            }
        },
        "da.DADataStatList": {
            "description": "DA storage data list",
            "type": "object",
            "properties": {
                "list": {
                    "description": "Stat list",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/da.DADataStat"
                    }
                },
                "total": {
                    "description": "The total number of stat returned",
                    "type": "integer"
                }
            }
        },
        "da.DASignerStat": {
            "description": "DA signer information",
            "type": "object",
            "properties": {
                "signerActive": {
                    "description": "Number of active da signer in a specific time interval",
                    "type": "integer"
                },
                "signerNew": {
                    "description": "Number of da signer in a specific time interval",
                    "type": "integer"
                },
                "signerTotal": {
                    "description": "Total number of da signer by a certain time",
                    "type": "integer"
                },
                "statTime": {
                    "description": "Statistics time",
                    "type": "string"
                }
            }
        },
        "da.DASignerStatList": {
            "description": "DA signer stat list",
            "type": "object",
            "properties": {
                "list": {
                    "description": "Stat list",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/da.DASignerStat"
                    }
                },
                "total": {
                    "description": "The total number of stat returned",
                    "type": "integer"
                }
            }
        },
        "da.DATxInfo": {
            "description": "DA submission transaction information",
            "type": "object",
            "properties": {
                "blockNumber": {
                    "description": "The block where the submit event is emitted",
                    "type": "integer"
                },
                "epoch": {
                    "description": "Epoch index in DataUpload event",
                    "type": "integer"
                },
                "from": {
                    "description": "File uploader address",
                    "type": "string"
                },
                "method": {
                    "description": "The name of the submit event",
                    "type": "string"
                },
                "quorumID": {
                    "description": "QuorumID in DataUpload event",
                    "type": "integer"
                },
                "rootHash": {
                    "description": "Merkle root of the data to upload",
                    "type": "string"
                },
                "status": {
                    "description": "Data upload status, 0-not verified,1-verified",
                    "type": "integer"
                },
                "storageFee": {
                    "description": "The storage fee required to upload the file",
                    "type": "number"
                },
                "timestamp": {
                    "description": "The block time when submit event emits",
                    "type": "integer"
                },
                "txHash": {
                    "description": "The transaction where the submit event is emitted",
                    "type": "string"
                }
            }
        },
        "da.DATxList": {
            "description": "DA submission information list",
            "type": "object",
            "properties": {
                "list": {
                    "description": "DA submission list",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/da.DATxInfo"
                    }
                },
                "total": {
                    "description": "The total number of da submission returned",
                    "type": "integer"
                }
            }
        },
        "da.Reward": {
            "description": "Reward information",
            "type": "object",
            "properties": {
                "amount": {
                    "description": "The reward amount",
                    "type": "number"
                },
                "blockNumber": {
                    "description": "The block where the reward event is emitted",
                    "type": "integer"
                },
                "epoch": {
                    "description": "The consecutive blocks in 0g chain is divided into groups of EpochBlocks and each group is an epoch.",
                    "type": "integer"
                },
                "miner": {
                    "description": "Miner address",
                    "type": "string"
                },
                "quorumID": {
                    "description": "The i-th quorum in an epoch",
                    "type": "integer"
                },
                "rootHash": {
                    "description": "The data root",
                    "type": "string"
                },
                "sampleRound": {
                    "description": "DA Sample round",
                    "type": "integer"
                },
                "timestamp": {
                    "description": "The block time when reward event emits",
                    "type": "integer"
                },
                "txHash": {
                    "description": "The transaction where the reward event is emitted",
                    "type": "string"
                }
            }
        },
        "da.RewardList": {
            "description": "Miner reward list",
            "type": "object",
            "properties": {
                "list": {
                    "description": "Miner reward list",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/da.Reward"
                    }
                },
                "total": {
                    "description": "The total number of miner reward returned",
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfoda holds exported Swagger Info so clients can modify it
var SwaggerInfoda = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "0G DA Scan API",
	Description:      "Use any http client to fetch data from the 0G DA Scan.\n\n## Common Error Messages\n### Response code and message\nAn API call that encounters an error will return non-zero as its response code. The error message will be returned in the message field and the detailed reason for the error will be returned in the data field.\n\n| Error code | Error message                                      |\n|:-----------|:---------------------------------------------------|\n| 0          | Success                                            |\n| 1          | Invalid parameter,see Data for detailed error.     |\n| 2          | Internal server error,see Data for detailed error. |\n| 3          | Too many requests,see Data for detailed error.     |\n\ne.g.\n```json\n{\n\"code\": 2,\n\"message\":\"Internal server error\",\n\"data\":\"No matching DA-submit record found, txSeq 1000000\"\n}\n```\n### Http status code\nTo distinguish backend service error and gateway error, we only use `200` and `600` as HTTP response status code:\n- 200: success, or known business error, e.g. entity not found.\n- 600: unexpected system error, e.g. database error, blockchain rpc error, io error.\n\n## Rate Limit\nHere are references for various API tiers and their rate limits.\n\n| API Tier\t   | Price            | \tRate Limit                           |\n|:------------|:-----------------|:-----------------------------------------|\n| Free\t       | $0               | 5 calls/second, up to 100,000 calls/day  |\n| Standard\t   | To be determined | 20 calls/second, up to 500,000 calls/day |\n| Enterprise  | To be determined | Customize on demand                      |\n\n\n\n\n\n",
	InfoInstanceName: "da",
	SwaggerTemplate:  docTemplateda,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfoda.InstanceName(), SwaggerInfoda)
}
